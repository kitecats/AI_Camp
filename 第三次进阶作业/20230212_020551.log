2023/02/12 02:05:52 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.7.12 | packaged by conda-forge | (default, Oct 26 2021, 06:08:53) [GCC 9.4.0]
    CUDA available: True
    numpy_random_seed: 1712414203
    GPU 0: Tesla P100-PCIE-16GB
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 11.0, V11.0.221
    GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
    PyTorch: 1.11.0
    PyTorch compiling details: PyTorch built with:
  - GCC 9.4
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2022.1-Product Build 20220311 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 11.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_70,code=compute_70;-gencode;arch=compute_75,code=compute_75
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.0, CUDNN_VERSION=8.0.5, CXX_COMPILER=/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.12.0
    OpenCV: 4.5.4
    MMEngine: 0.5.0

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: None
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/02/12 02:05:53 - mmengine - INFO - Config:
norm_cfg = dict(type='SyncBN', requires_grad=True)
data_preprocessor = dict(
    type='SegDataPreProcessor',
    mean=[123.675, 116.28, 103.53],
    std=[58.395, 57.12, 57.375],
    bgr_to_rgb=True,
    pad_val=0,
    seg_pad_val=255,
    size=(512, 512))
model = dict(
    type='EncoderDecoder',
    data_preprocessor=dict(
        type='SegDataPreProcessor',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        bgr_to_rgb=True,
        pad_val=0,
        seg_pad_val=255,
        size=(512, 512)),
    pretrained='open-mmlab://resnet50_v1c',
    backbone=dict(
        type='ResNetV1c',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        dilations=(1, 1, 1, 1),
        strides=(1, 2, 2, 2),
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True),
    decode_head=dict(
        type='UPerHead',
        in_channels=[256, 512, 1024, 2048],
        in_index=[0, 1, 2, 3],
        pool_scales=(1, 2, 3, 6),
        channels=512,
        dropout_ratio=0.1,
        num_classes=21,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    auxiliary_head=dict(
        type='FCNHead',
        in_channels=1024,
        in_index=2,
        channels=256,
        num_convs=1,
        concat_input=False,
        dropout_ratio=0.1,
        num_classes=21,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'PascalVOCDataset'
data_root = 'data/VOCdevkit/VOC2012'
crop_size = (512, 512)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(
        type='RandomResize',
        scale=(2048, 512),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', scale=(2048, 512), keep_ratio=True),
    dict(type='LoadAnnotations'),
    dict(type='PackSegInputs')
]
img_ratios = [0.5, 0.75, 1.0, 1.25, 1.5, 1.75]
tta_pipeline = [
    dict(type='LoadImageFromFile', backend_args=dict(backend='local')),
    dict(
        type='TestTimeAug',
        transforms=[[{
            'type': 'Resize',
            'scale_factor': 0.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 0.75,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.0,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.25,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.75,
            'keep_ratio': True
        }],
                    [{
                        'type': 'RandomFlip',
                        'prob': 0.0,
                        'direction': 'horizontal'
                    }, {
                        'type': 'RandomFlip',
                        'prob': 1.0,
                        'direction': 'horizontal'
                    }], [{
                        'type': 'LoadAnnotations'
                    }], [{
                        'type': 'PackSegInputs'
                    }]])
]
train_dataloader = dict(
    batch_size=4,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='InfiniteSampler', shuffle=True),
    dataset=dict(
        type='PascalVOCDataset',
        data_root='data/VOCdevkit/VOC2012',
        data_prefix=dict(
            img_path='JPEGImages', seg_map_path='SegmentationClass'),
        ann_file='ImageSets/Segmentation/train.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(
                type='RandomResize',
                scale=(2048, 512),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs')
        ]))
val_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='PascalVOCDataset',
        data_root='data/VOCdevkit/VOC2012',
        data_prefix=dict(
            img_path='JPEGImages', seg_map_path='SegmentationClass'),
        ann_file='ImageSets/Segmentation/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(2048, 512), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ]))
test_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='PascalVOCDataset',
        data_root='data/VOCdevkit/VOC2012',
        data_prefix=dict(
            img_path='JPEGImages', seg_map_path='SegmentationClass'),
        ann_file='ImageSets/Segmentation/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(2048, 512), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ]))
val_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
test_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='SegLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(by_epoch=False)
log_level = 'INFO'
load_from = 'https://download.openmmlab.com/mmsegmentation/v0.5/upernet/upernet_r50_512x512_20k_voc12aug/upernet_r50_512x512_20k_voc12aug_20200617_165330-5b5890a7.pth'
resume = False
tta_model = dict(type='SegTTAModel')
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='SGD', lr=0.0001, momentum=0.09, weight_decay=5e-05),
    clip_grad=None)
param_scheduler = [
    dict(
        type='PolyLR',
        eta_min=1e-05,
        power=0.9,
        begin=0,
        end=2000,
        by_epoch=False)
]
train_cfg = dict(type='IterBasedTrainLoop', max_iters=2000, val_interval=200)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=100, log_metric_by_epoch=False),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', by_epoch=False, interval=400),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='SegVisualizationHook'))
launcher = 'none'
work_dir = './work_dirs/my_config'

2023/02/12 02:05:53 - mmengine - WARNING - The "visualizer" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 02:05:53 - mmengine - WARNING - The "vis_backend" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 02:05:54 - mmengine - WARNING - The "model" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 02:05:59 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/02/12 02:05:59 - mmengine - WARNING - The "hook" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 02:05:59 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/02/12 02:05:59 - mmengine - WARNING - The "loop" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 02:05:59 - mmengine - WARNING - The "dataset" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 02:05:59 - mmengine - WARNING - The "transform" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 02:05:59 - mmengine - WARNING - The "data sampler" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 02:05:59 - mmengine - WARNING - The "optimizer wrapper constructor" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 02:05:59 - mmengine - WARNING - The "optimizer" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 02:05:59 - mmengine - WARNING - The "optim_wrapper" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 02:05:59 - mmengine - WARNING - The "parameter scheduler" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 02:06:00 - mmengine - WARNING - The "metric" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 02:06:01 - mmengine - WARNING - The "weight initializer" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 02:06:01 - mmengine - INFO - load model from: open-mmlab://resnet50_v1c
2023/02/12 02:06:01 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://resnet50_v1c
2023/02/12 02:06:25 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.stem.0.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.1.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.1.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.3.weight - torch.Size([32, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.4.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.4.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.6.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.7.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.7.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

decode_head.conv_seg.weight - torch.Size([21, 512, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([21]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.psp_modules.0.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.conv.weight - torch.Size([512, 4096, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.bottleneck.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.lateral_convs.0.conv.weight - torch.Size([512, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.lateral_convs.0.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.lateral_convs.0.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.lateral_convs.1.conv.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.lateral_convs.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.lateral_convs.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.lateral_convs.2.conv.weight - torch.Size([512, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.lateral_convs.2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.lateral_convs.2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.fpn_convs.0.conv.weight - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.fpn_convs.0.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.fpn_convs.0.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.fpn_convs.1.conv.weight - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.fpn_convs.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.fpn_convs.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.fpn_convs.2.conv.weight - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.fpn_convs.2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.fpn_convs.2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.fpn_bottleneck.conv.weight - torch.Size([512, 2048, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.fpn_bottleneck.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.fpn_bottleneck.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.conv_seg.weight - torch.Size([21, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.conv_seg.bias - torch.Size([21]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.convs.0.conv.weight - torch.Size([256, 1024, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2023/02/12 02:07:21 - mmengine - INFO - Load checkpoint from https://download.openmmlab.com/mmsegmentation/v0.5/upernet/upernet_r50_512x512_20k_voc12aug/upernet_r50_512x512_20k_voc12aug_20200617_165330-5b5890a7.pth
2023/02/12 02:07:21 - mmengine - INFO - Checkpoints will be saved to /kaggle/working/mmsegmentation/work_dirs/my_config.
2023/02/12 02:08:29 - mmengine - INFO - Iter(train) [ 100/2000]  lr: 9.5978e-05  eta: 0:21:21  time: 0.5487  data_time: 0.0108  memory: 11486  loss: 0.4275  decode.loss_ce: 0.2168  decode.acc_seg: 93.4860  aux.loss_ce: 0.2107  aux.acc_seg: 85.3227
2023/02/12 02:09:24 - mmengine - INFO - Iter(train) [ 200/2000]  lr: 9.1895e-05  eta: 0:18:22  time: 0.5523  data_time: 0.0107  memory: 6272  loss: 0.4198  decode.loss_ce: 0.2117  decode.acc_seg: 88.0612  aux.loss_ce: 0.2080  aux.acc_seg: 70.6531
2023/02/12 02:11:40 - mmengine - INFO - Iter(val) [ 100/1449]    eta: 0:30:29  time: 0.3593  data_time: 0.0031  memory: 9908  
2023/02/12 02:12:49 - mmengine - INFO - Iter(val) [ 200/1449]    eta: 0:21:22  time: 1.1160  data_time: 0.0028  memory: 10469  
2023/02/12 02:13:33 - mmengine - INFO - Iter(val) [ 300/1449]    eta: 0:15:52  time: 0.0792  data_time: 0.0027  memory: 9903  
2023/02/12 02:14:13 - mmengine - INFO - Iter(val) [ 400/1449]    eta: 0:12:38  time: 0.8281  data_time: 0.0049  memory: 9903  
2023/02/12 02:14:55 - mmengine - INFO - Iter(val) [ 500/1449]    eta: 0:10:27  time: 0.6434  data_time: 0.0029  memory: 10651  
2023/02/12 02:15:23 - mmengine - INFO - Iter(val) [ 600/1449]    eta: 0:08:28  time: 0.2686  data_time: 0.0025  memory: 10841  
2023/02/12 02:15:57 - mmengine - INFO - Iter(val) [ 700/1449]    eta: 0:07:00  time: 0.8109  data_time: 0.0034  memory: 11405  
2023/02/12 02:16:25 - mmengine - INFO - Iter(val) [ 800/1449]    eta: 0:05:41  time: 0.6831  data_time: 0.0027  memory: 9690  
2023/02/12 02:16:48 - mmengine - INFO - Iter(val) [ 900/1449]    eta: 0:04:30  time: 0.0851  data_time: 0.0027  memory: 9394  
2023/02/12 02:17:14 - mmengine - INFO - Iter(val) [1000/1449]    eta: 0:03:30  time: 0.4634  data_time: 0.0033  memory: 11028  
2023/02/12 02:17:29 - mmengine - INFO - Iter(val) [1100/1449]    eta: 0:02:33  time: 0.5470  data_time: 0.0038  memory: 9715  
2023/02/12 02:17:50 - mmengine - INFO - Iter(val) [1200/1449]    eta: 0:01:45  time: 0.3392  data_time: 0.0028  memory: 11214  
2023/02/12 02:18:07 - mmengine - INFO - Iter(val) [1300/1449]    eta: 0:00:59  time: 0.0688  data_time: 0.0027  memory: 9697  
2023/02/12 02:18:18 - mmengine - INFO - Iter(val) [1400/1449]    eta: 0:00:18  time: 0.0702  data_time: 0.0028  memory: 9087  
2023/02/12 02:18:25 - mmengine - INFO - per class results:
2023/02/12 02:18:25 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 93.67 | 96.84 |
|  aeroplane  | 86.94 | 92.91 |
|   bicycle   | 42.13 | 92.11 |
|     bird    | 84.93 | 91.55 |
|     boat    |  66.8 | 85.29 |
|    bottle   | 71.61 | 81.97 |
|     bus     |  90.5 |  93.0 |
|     car     | 84.13 | 91.61 |
|     cat     | 89.47 |  95.2 |
|    chair    | 37.11 | 55.67 |
|     cow     | 85.33 | 89.69 |
| diningtable | 57.84 | 64.18 |
|     dog     | 82.06 | 91.93 |
|    horse    | 82.99 | 91.34 |
|  motorbike  | 80.27 | 90.04 |
|    person   | 83.46 | 90.72 |
| pottedplant | 62.33 | 74.12 |
|    sheep    | 81.28 | 93.45 |
|     sofa    | 45.96 | 55.23 |
|    train    | 86.02 | 93.46 |
|  tvmonitor  | 63.43 | 75.82 |
+-------------+-------+-------+
2023/02/12 02:18:25 - mmengine - INFO - Iter(val) [1449/1449]  aAcc: 94.0600  mIoU: 74.2000  mAcc: 85.0500
2023/02/12 02:19:20 - mmengine - INFO - Iter(train) [ 300/2000]  lr: 8.7788e-05  eta: 0:16:48  time: 0.5520  data_time: 0.0115  memory: 9313  loss: 0.3627  decode.loss_ce: 0.1615  decode.acc_seg: 95.9029  aux.loss_ce: 0.2012  aux.acc_seg: 93.6090
2023/02/12 02:19:57 - mmengine - INFO - Exp name: my_config_20230212_020551
2023/02/12 02:20:15 - mmengine - INFO - Iter(train) [ 400/2000]  lr: 8.3658e-05  eta: 0:15:33  time: 0.5626  data_time: 0.0148  memory: 6272  loss: 0.3865  decode.loss_ce: 0.1822  decode.acc_seg: 94.4193  aux.loss_ce: 0.2043  aux.acc_seg: 83.3181
2023/02/12 02:20:15 - mmengine - INFO - Saving checkpoint at 400 iterations
2023/02/12 02:20:25 - mmengine - INFO - Iter(val) [ 100/1449]    eta: 0:01:38  time: 0.0708  data_time: 0.0031  memory: 1493  
2023/02/12 02:20:33 - mmengine - INFO - Iter(val) [ 200/1449]    eta: 0:01:32  time: 0.0741  data_time: 0.0031  memory: 1723  
2023/02/12 02:20:40 - mmengine - INFO - Iter(val) [ 300/1449]    eta: 0:01:24  time: 0.0709  data_time: 0.0031  memory: 1387  
2023/02/12 02:20:47 - mmengine - INFO - Iter(val) [ 400/1449]    eta: 0:01:17  time: 0.0748  data_time: 0.0030  memory: 1379  
2023/02/12 02:20:54 - mmengine - INFO - Iter(val) [ 500/1449]    eta: 0:01:09  time: 0.0782  data_time: 0.0033  memory: 1867  
2023/02/12 02:21:02 - mmengine - INFO - Iter(val) [ 600/1449]    eta: 0:01:02  time: 0.0743  data_time: 0.0031  memory: 1420  
2023/02/12 02:21:09 - mmengine - INFO - Iter(val) [ 700/1449]    eta: 0:00:54  time: 0.0742  data_time: 0.0031  memory: 1406  
2023/02/12 02:21:17 - mmengine - INFO - Iter(val) [ 800/1449]    eta: 0:00:47  time: 0.0795  data_time: 0.0032  memory: 1511  
2023/02/12 02:21:24 - mmengine - INFO - Iter(val) [ 900/1449]    eta: 0:00:40  time: 0.0732  data_time: 0.0033  memory: 1356  
2023/02/12 02:21:31 - mmengine - INFO - Iter(val) [1000/1449]    eta: 0:00:32  time: 0.0705  data_time: 0.0035  memory: 1427  
2023/02/12 02:21:38 - mmengine - INFO - Iter(val) [1100/1449]    eta: 0:00:25  time: 0.0757  data_time: 0.0030  memory: 1617  
2023/02/12 02:21:45 - mmengine - INFO - Iter(val) [1200/1449]    eta: 0:00:18  time: 0.0740  data_time: 0.0035  memory: 1379  
2023/02/12 02:21:53 - mmengine - INFO - Iter(val) [1300/1449]    eta: 0:00:10  time: 0.0701  data_time: 0.0028  memory: 1539  
2023/02/12 02:22:00 - mmengine - INFO - Iter(val) [1400/1449]    eta: 0:00:03  time: 0.0723  data_time: 0.0028  memory: 1361  
2023/02/12 02:22:04 - mmengine - INFO - per class results:
2023/02/12 02:22:04 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 93.56 | 96.47 |
|  aeroplane  | 86.86 | 93.73 |
|   bicycle   | 41.97 | 91.88 |
|     bird    |  84.7 |  92.5 |
|     boat    | 67.65 | 86.82 |
|    bottle   | 71.46 | 83.91 |
|     bus     | 92.74 | 96.61 |
|     car     | 83.67 | 92.46 |
|     cat     | 89.85 | 95.07 |
|    chair    | 35.43 | 57.19 |
|     cow     | 84.37 | 88.74 |
| diningtable | 57.68 | 65.02 |
|     dog     | 82.55 | 92.02 |
|    horse    | 82.98 | 92.73 |
|  motorbike  | 79.65 | 91.54 |
|    person   | 83.26 | 90.85 |
| pottedplant | 62.24 | 75.15 |
|    sheep    | 82.17 | 92.95 |
|     sofa    | 44.72 | 55.05 |
|    train    | 87.53 | 93.87 |
|  tvmonitor  | 63.28 | 77.34 |
+-------------+-------+-------+
2023/02/12 02:22:04 - mmengine - INFO - Iter(val) [1449/1449]  aAcc: 93.9700  mIoU: 74.2100  mAcc: 85.8000
2023/02/12 02:22:59 - mmengine - INFO - Iter(train) [ 500/2000]  lr: 7.9501e-05  eta: 0:14:25  time: 0.5501  data_time: 0.0102  memory: 6272  loss: 0.4320  decode.loss_ce: 0.2287  decode.acc_seg: 85.8837  aux.loss_ce: 0.2034  aux.acc_seg: 78.5513
2023/02/12 02:23:54 - mmengine - INFO - Iter(train) [ 600/2000]  lr: 7.5317e-05  eta: 0:13:22  time: 0.5599  data_time: 0.0136  memory: 6272  loss: 0.3759  decode.loss_ce: 0.1962  decode.acc_seg: 84.7711  aux.loss_ce: 0.1797  aux.acc_seg: 75.5934
2023/02/12 02:24:01 - mmengine - INFO - Iter(val) [ 100/1449]    eta: 0:01:37  time: 0.0721  data_time: 0.0027  memory: 1493  
2023/02/12 02:24:09 - mmengine - INFO - Iter(val) [ 200/1449]    eta: 0:01:31  time: 0.0728  data_time: 0.0026  memory: 1723  
2023/02/12 02:24:16 - mmengine - INFO - Iter(val) [ 300/1449]    eta: 0:01:23  time: 0.0713  data_time: 0.0031  memory: 1387  
2023/02/12 02:24:23 - mmengine - INFO - Iter(val) [ 400/1449]    eta: 0:01:16  time: 0.0732  data_time: 0.0027  memory: 1379  
2023/02/12 02:24:31 - mmengine - INFO - Iter(val) [ 500/1449]    eta: 0:01:09  time: 0.0780  data_time: 0.0030  memory: 1867  
2023/02/12 02:24:38 - mmengine - INFO - Iter(val) [ 600/1449]    eta: 0:01:02  time: 0.0728  data_time: 0.0030  memory: 1420  
2023/02/12 02:24:45 - mmengine - INFO - Iter(val) [ 700/1449]    eta: 0:00:54  time: 0.0758  data_time: 0.0029  memory: 1406  
2023/02/12 02:24:53 - mmengine - INFO - Iter(val) [ 800/1449]    eta: 0:00:47  time: 0.0787  data_time: 0.0033  memory: 1511  
2023/02/12 02:25:00 - mmengine - INFO - Iter(val) [ 900/1449]    eta: 0:00:40  time: 0.0756  data_time: 0.0032  memory: 1356  
2023/02/12 02:25:07 - mmengine - INFO - Iter(val) [1000/1449]    eta: 0:00:32  time: 0.0728  data_time: 0.0035  memory: 1427  
2023/02/12 02:25:15 - mmengine - INFO - Iter(val) [1100/1449]    eta: 0:00:25  time: 0.0759  data_time: 0.0031  memory: 1617  
2023/02/12 02:25:22 - mmengine - INFO - Iter(val) [1200/1449]    eta: 0:00:18  time: 0.0742  data_time: 0.0037  memory: 1379  
2023/02/12 02:25:29 - mmengine - INFO - Iter(val) [1300/1449]    eta: 0:00:10  time: 0.0828  data_time: 0.0108  memory: 1539  
2023/02/12 02:25:37 - mmengine - INFO - Iter(val) [1400/1449]    eta: 0:00:03  time: 0.0725  data_time: 0.0027  memory: 1361  
2023/02/12 02:25:40 - mmengine - INFO - per class results:
2023/02/12 02:25:40 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 93.48 | 96.34 |
|  aeroplane  | 87.44 | 93.51 |
|   bicycle   | 42.37 | 90.46 |
|     bird    | 84.77 | 93.38 |
|     boat    | 68.57 | 88.46 |
|    bottle   |  69.2 | 82.38 |
|     bus     | 90.76 | 94.12 |
|     car     | 84.88 | 92.24 |
|     cat     | 88.37 |  95.2 |
|    chair    | 34.82 | 60.64 |
|     cow     |  87.6 | 92.73 |
| diningtable | 59.52 |  67.0 |
|     dog     | 81.54 | 88.39 |
|    horse    | 83.93 | 89.38 |
|  motorbike  | 78.76 | 91.28 |
|    person   | 83.33 | 91.15 |
| pottedplant | 59.89 | 67.81 |
|    sheep    | 79.49 | 93.15 |
|     sofa    | 44.66 | 54.48 |
|    train    | 85.79 | 93.58 |
|  tvmonitor  | 56.24 | 80.66 |
+-------------+-------+-------+
2023/02/12 02:25:40 - mmengine - INFO - Iter(val) [1449/1449]  aAcc: 93.8100  mIoU: 73.5900  mAcc: 85.5400
2023/02/12 02:26:36 - mmengine - INFO - Iter(train) [ 700/2000]  lr: 7.1103e-05  eta: 0:12:21  time: 0.5594  data_time: 0.0136  memory: 6272  loss: 0.3429  decode.loss_ce: 0.1494  decode.acc_seg: 92.4772  aux.loss_ce: 0.1935  aux.acc_seg: 86.3136
2023/02/12 02:27:31 - mmengine - INFO - Iter(train) [ 800/2000]  lr: 6.6856e-05  eta: 0:11:21  time: 0.5500  data_time: 0.0096  memory: 6272  loss: 0.3679  decode.loss_ce: 0.1472  decode.acc_seg: 99.1060  aux.loss_ce: 0.2207  aux.acc_seg: 88.0770
2023/02/12 02:27:31 - mmengine - INFO - Saving checkpoint at 800 iterations
2023/02/12 02:27:40 - mmengine - INFO - Iter(val) [ 100/1449]    eta: 0:01:38  time: 0.0705  data_time: 0.0023  memory: 1493  
2023/02/12 02:27:48 - mmengine - INFO - Iter(val) [ 200/1449]    eta: 0:01:31  time: 0.0731  data_time: 0.0026  memory: 1723  
2023/02/12 02:27:55 - mmengine - INFO - Iter(val) [ 300/1449]    eta: 0:01:23  time: 0.0713  data_time: 0.0042  memory: 1387  
2023/02/12 02:28:02 - mmengine - INFO - Iter(val) [ 400/1449]    eta: 0:01:15  time: 0.0742  data_time: 0.0034  memory: 1379  
2023/02/12 02:28:10 - mmengine - INFO - Iter(val) [ 500/1449]    eta: 0:01:09  time: 0.0787  data_time: 0.0024  memory: 1867  
2023/02/12 02:28:17 - mmengine - INFO - Iter(val) [ 600/1449]    eta: 0:01:02  time: 0.0710  data_time: 0.0022  memory: 1420  
2023/02/12 02:28:24 - mmengine - INFO - Iter(val) [ 700/1449]    eta: 0:00:54  time: 0.0739  data_time: 0.0024  memory: 1406  
2023/02/12 02:28:32 - mmengine - INFO - Iter(val) [ 800/1449]    eta: 0:00:47  time: 0.0777  data_time: 0.0028  memory: 1511  
2023/02/12 02:28:39 - mmengine - INFO - Iter(val) [ 900/1449]    eta: 0:00:39  time: 0.0769  data_time: 0.0046  memory: 1356  
2023/02/12 02:28:46 - mmengine - INFO - Iter(val) [1000/1449]    eta: 0:00:32  time: 0.0707  data_time: 0.0034  memory: 1427  
2023/02/12 02:28:53 - mmengine - INFO - Iter(val) [1100/1449]    eta: 0:00:25  time: 0.0760  data_time: 0.0025  memory: 1617  
2023/02/12 02:29:00 - mmengine - INFO - Iter(val) [1200/1449]    eta: 0:00:18  time: 0.0799  data_time: 0.0044  memory: 1379  
2023/02/12 02:29:08 - mmengine - INFO - Iter(val) [1300/1449]    eta: 0:00:10  time: 0.0698  data_time: 0.0029  memory: 1539  
2023/02/12 02:29:15 - mmengine - INFO - Iter(val) [1400/1449]    eta: 0:00:03  time: 0.0702  data_time: 0.0029  memory: 1361  
2023/02/12 02:29:18 - mmengine - INFO - per class results:
2023/02/12 02:29:18 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 93.49 | 96.37 |
|  aeroplane  | 86.21 | 94.04 |
|   bicycle   | 43.17 | 89.76 |
|     bird    | 85.65 | 93.45 |
|     boat    | 66.13 | 85.15 |
|    bottle   | 70.33 | 81.08 |
|     bus     | 90.24 | 93.87 |
|     car     |  84.8 | 92.37 |
|     cat     | 89.35 | 94.88 |
|    chair    | 35.77 | 59.66 |
|     cow     | 87.02 |  93.0 |
| diningtable | 59.15 | 64.83 |
|     dog     | 82.59 | 91.26 |
|    horse    | 84.41 |  92.3 |
|  motorbike  | 76.83 | 91.96 |
|    person   | 83.27 |  90.1 |
| pottedplant | 62.03 |  75.7 |
|    sheep    | 82.24 | 91.31 |
|     sofa    | 45.51 | 55.69 |
|    train    | 82.96 | 94.46 |
|  tvmonitor  | 58.16 | 80.28 |
+-------------+-------+-------+
2023/02/12 02:29:18 - mmengine - INFO - Iter(val) [1449/1449]  aAcc: 93.8600  mIoU: 73.7800  mAcc: 85.7900
2023/02/12 02:30:14 - mmengine - INFO - Iter(train) [ 900/2000]  lr: 6.2573e-05  eta: 0:10:22  time: 0.5513  data_time: 0.0096  memory: 6272  loss: 0.4733  decode.loss_ce: 0.2233  decode.acc_seg: 96.2892  aux.loss_ce: 0.2501  aux.acc_seg: 85.6087
2023/02/12 02:31:09 - mmengine - INFO - Exp name: my_config_20230212_020551
2023/02/12 02:31:09 - mmengine - INFO - Iter(train) [1000/2000]  lr: 5.8252e-05  eta: 0:09:24  time: 0.5483  data_time: 0.0089  memory: 6272  loss: 0.3779  decode.loss_ce: 0.2049  decode.acc_seg: 87.8878  aux.loss_ce: 0.1729  aux.acc_seg: 77.9688
2023/02/12 02:31:16 - mmengine - INFO - Iter(val) [ 100/1449]    eta: 0:01:37  time: 0.0700  data_time: 0.0024  memory: 1493  
2023/02/12 02:31:24 - mmengine - INFO - Iter(val) [ 200/1449]    eta: 0:01:32  time: 0.0760  data_time: 0.0031  memory: 1723  
2023/02/12 02:31:31 - mmengine - INFO - Iter(val) [ 300/1449]    eta: 0:01:23  time: 0.0704  data_time: 0.0026  memory: 1387  
2023/02/12 02:31:38 - mmengine - INFO - Iter(val) [ 400/1449]    eta: 0:01:16  time: 0.0727  data_time: 0.0024  memory: 1379  
2023/02/12 02:31:45 - mmengine - INFO - Iter(val) [ 500/1449]    eta: 0:01:08  time: 0.0849  data_time: 0.0054  memory: 1867  
2023/02/12 02:31:53 - mmengine - INFO - Iter(val) [ 600/1449]    eta: 0:01:01  time: 0.0712  data_time: 0.0026  memory: 1420  
2023/02/12 02:32:00 - mmengine - INFO - Iter(val) [ 700/1449]    eta: 0:00:54  time: 0.0750  data_time: 0.0026  memory: 1406  
2023/02/12 02:32:07 - mmengine - INFO - Iter(val) [ 800/1449]    eta: 0:00:47  time: 0.0835  data_time: 0.0048  memory: 1511  
2023/02/12 02:32:14 - mmengine - INFO - Iter(val) [ 900/1449]    eta: 0:00:39  time: 0.0730  data_time: 0.0029  memory: 1356  
2023/02/12 02:32:21 - mmengine - INFO - Iter(val) [1000/1449]    eta: 0:00:32  time: 0.0732  data_time: 0.0037  memory: 1427  
2023/02/12 02:32:29 - mmengine - INFO - Iter(val) [1100/1449]    eta: 0:00:25  time: 0.0754  data_time: 0.0030  memory: 1617  
2023/02/12 02:32:36 - mmengine - INFO - Iter(val) [1200/1449]    eta: 0:00:17  time: 0.0710  data_time: 0.0023  memory: 1379  
2023/02/12 02:32:43 - mmengine - INFO - Iter(val) [1300/1449]    eta: 0:00:10  time: 0.0689  data_time: 0.0025  memory: 1539  
2023/02/12 02:32:50 - mmengine - INFO - Iter(val) [1400/1449]    eta: 0:00:03  time: 0.0702  data_time: 0.0024  memory: 1361  
2023/02/12 02:32:54 - mmengine - INFO - per class results:
2023/02/12 02:32:54 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 93.62 |  96.4 |
|  aeroplane  | 87.23 | 93.08 |
|   bicycle   |  41.8 | 91.04 |
|     bird    | 84.84 | 93.85 |
|     boat    | 67.74 | 86.15 |
|    bottle   | 73.05 | 84.82 |
|     bus     | 90.09 | 93.82 |
|     car     | 85.51 | 91.04 |
|     cat     |  89.1 |  95.2 |
|    chair    | 34.51 | 56.25 |
|     cow     |  85.6 | 90.78 |
| diningtable | 59.02 | 65.49 |
|     dog     | 81.32 | 91.32 |
|    horse    | 83.87 | 93.73 |
|  motorbike  | 81.94 | 89.84 |
|    person   | 83.27 | 90.49 |
| pottedplant | 60.35 |  70.9 |
|    sheep    | 78.23 | 94.52 |
|     sofa    | 47.49 | 60.99 |
|    train    | 84.72 | 93.89 |
|  tvmonitor  | 61.52 | 80.39 |
+-------------+-------+-------+
2023/02/12 02:32:54 - mmengine - INFO - Iter(val) [1449/1449]  aAcc: 93.9400  mIoU: 74.0400  mAcc: 85.9000
2023/02/12 02:33:49 - mmengine - INFO - Iter(train) [1100/2000]  lr: 5.3886e-05  eta: 0:08:27  time: 0.5542  data_time: 0.0119  memory: 6272  loss: 0.3944  decode.loss_ce: 0.1892  decode.acc_seg: 90.1641  aux.loss_ce: 0.2052  aux.acc_seg: 71.0331
2023/02/12 02:34:44 - mmengine - INFO - Iter(train) [1200/2000]  lr: 4.9472e-05  eta: 0:07:30  time: 0.5520  data_time: 0.0104  memory: 6272  loss: 0.4170  decode.loss_ce: 0.1990  decode.acc_seg: 92.4843  aux.loss_ce: 0.2180  aux.acc_seg: 79.8424
2023/02/12 02:34:44 - mmengine - INFO - Saving checkpoint at 1200 iterations
2023/02/12 02:34:54 - mmengine - INFO - Iter(val) [ 100/1449]    eta: 0:01:37  time: 0.0710  data_time: 0.0027  memory: 1493  
2023/02/12 02:35:01 - mmengine - INFO - Iter(val) [ 200/1449]    eta: 0:01:31  time: 0.0886  data_time: 0.0118  memory: 1723  
2023/02/12 02:35:09 - mmengine - INFO - Iter(val) [ 300/1449]    eta: 0:01:24  time: 0.0706  data_time: 0.0029  memory: 1387  
2023/02/12 02:35:16 - mmengine - INFO - Iter(val) [ 400/1449]    eta: 0:01:17  time: 0.0792  data_time: 0.0049  memory: 1379  
2023/02/12 02:35:23 - mmengine - INFO - Iter(val) [ 500/1449]    eta: 0:01:09  time: 0.0795  data_time: 0.0026  memory: 1867  
2023/02/12 02:35:30 - mmengine - INFO - Iter(val) [ 600/1449]    eta: 0:01:01  time: 0.0707  data_time: 0.0023  memory: 1420  
2023/02/12 02:35:38 - mmengine - INFO - Iter(val) [ 700/1449]    eta: 0:00:54  time: 0.0741  data_time: 0.0022  memory: 1406  
2023/02/12 02:35:45 - mmengine - INFO - Iter(val) [ 800/1449]    eta: 0:00:47  time: 0.0793  data_time: 0.0027  memory: 1511  
2023/02/12 02:35:52 - mmengine - INFO - Iter(val) [ 900/1449]    eta: 0:00:39  time: 0.0725  data_time: 0.0027  memory: 1356  
2023/02/12 02:35:59 - mmengine - INFO - Iter(val) [1000/1449]    eta: 0:00:32  time: 0.0711  data_time: 0.0030  memory: 1427  
2023/02/12 02:36:07 - mmengine - INFO - Iter(val) [1100/1449]    eta: 0:00:25  time: 0.0750  data_time: 0.0028  memory: 1617  
2023/02/12 02:36:14 - mmengine - INFO - Iter(val) [1200/1449]    eta: 0:00:18  time: 0.0713  data_time: 0.0026  memory: 1379  
2023/02/12 02:36:21 - mmengine - INFO - Iter(val) [1300/1449]    eta: 0:00:10  time: 0.0689  data_time: 0.0024  memory: 1539  
2023/02/12 02:36:28 - mmengine - INFO - Iter(val) [1400/1449]    eta: 0:00:03  time: 0.0701  data_time: 0.0026  memory: 1361  
2023/02/12 02:36:32 - mmengine - INFO - per class results:
2023/02/12 02:36:32 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 93.38 | 95.99 |
|  aeroplane  | 84.81 | 95.02 |
|   bicycle   | 41.93 | 92.03 |
|     bird    | 84.98 | 93.71 |
|     boat    | 66.09 | 86.98 |
|    bottle   | 70.84 | 87.73 |
|     bus     | 90.69 | 95.52 |
|     car     | 84.85 | 92.35 |
|     cat     | 89.81 | 94.76 |
|    chair    | 35.42 | 61.43 |
|     cow     | 87.14 | 94.33 |
| diningtable | 58.94 | 64.89 |
|     dog     | 83.05 | 92.34 |
|    horse    | 84.91 | 93.18 |
|  motorbike  | 81.69 | 91.04 |
|    person   | 83.18 | 90.91 |
| pottedplant | 62.27 | 73.47 |
|    sheep    |  80.6 | 91.78 |
|     sofa    |  46.8 | 58.61 |
|    train    | 86.57 | 94.02 |
|  tvmonitor  | 55.98 | 82.03 |
+-------------+-------+-------+
2023/02/12 02:36:32 - mmengine - INFO - Iter(val) [1449/1449]  aAcc: 93.8200  mIoU: 74.0000  mAcc: 86.7700
2023/02/12 02:37:27 - mmengine - INFO - Iter(train) [1300/2000]  lr: 4.5003e-05  eta: 0:06:33  time: 0.5531  data_time: 0.0107  memory: 6272  loss: 0.3277  decode.loss_ce: 0.1548  decode.acc_seg: 97.6722  aux.loss_ce: 0.1729  aux.acc_seg: 74.6920
2023/02/12 02:38:22 - mmengine - INFO - Iter(train) [1400/2000]  lr: 4.0468e-05  eta: 0:05:36  time: 0.5553  data_time: 0.0108  memory: 6272  loss: 0.4844  decode.loss_ce: 0.2511  decode.acc_seg: 92.7618  aux.loss_ce: 0.2333  aux.acc_seg: 82.7227
2023/02/12 02:38:29 - mmengine - INFO - Iter(val) [ 100/1449]    eta: 0:01:36  time: 0.0728  data_time: 0.0022  memory: 1493  
2023/02/12 02:38:37 - mmengine - INFO - Iter(val) [ 200/1449]    eta: 0:01:30  time: 0.0736  data_time: 0.0024  memory: 1723  
2023/02/12 02:38:44 - mmengine - INFO - Iter(val) [ 300/1449]    eta: 0:01:24  time: 0.0726  data_time: 0.0049  memory: 1387  
2023/02/12 02:38:51 - mmengine - INFO - Iter(val) [ 400/1449]    eta: 0:01:16  time: 0.0733  data_time: 0.0030  memory: 1379  
2023/02/12 02:38:59 - mmengine - INFO - Iter(val) [ 500/1449]    eta: 0:01:08  time: 0.0787  data_time: 0.0033  memory: 1867  
2023/02/12 02:39:06 - mmengine - INFO - Iter(val) [ 600/1449]    eta: 0:01:01  time: 0.0743  data_time: 0.0038  memory: 1420  
2023/02/12 02:39:13 - mmengine - INFO - Iter(val) [ 700/1449]    eta: 0:00:54  time: 0.0730  data_time: 0.0024  memory: 1406  
2023/02/12 02:39:20 - mmengine - INFO - Iter(val) [ 800/1449]    eta: 0:00:47  time: 0.0794  data_time: 0.0025  memory: 1511  
2023/02/12 02:39:28 - mmengine - INFO - Iter(val) [ 900/1449]    eta: 0:00:39  time: 0.0764  data_time: 0.0043  memory: 1356  
2023/02/12 02:39:35 - mmengine - INFO - Iter(val) [1000/1449]    eta: 0:00:32  time: 0.0733  data_time: 0.0042  memory: 1427  
2023/02/12 02:39:42 - mmengine - INFO - Iter(val) [1100/1449]    eta: 0:00:25  time: 0.0765  data_time: 0.0025  memory: 1617  
2023/02/12 02:39:49 - mmengine - INFO - Iter(val) [1200/1449]    eta: 0:00:18  time: 0.0814  data_time: 0.0090  memory: 1379  
2023/02/12 02:39:57 - mmengine - INFO - Iter(val) [1300/1449]    eta: 0:00:10  time: 0.0689  data_time: 0.0022  memory: 1539  
2023/02/12 02:40:04 - mmengine - INFO - Iter(val) [1400/1449]    eta: 0:00:03  time: 0.0702  data_time: 0.0025  memory: 1361  
2023/02/12 02:40:07 - mmengine - INFO - per class results:
2023/02/12 02:40:07 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 93.63 | 96.47 |
|  aeroplane  | 87.63 | 93.62 |
|   bicycle   |  41.5 |  88.5 |
|     bird    | 85.37 | 91.51 |
|     boat    | 68.48 | 83.19 |
|    bottle   | 71.45 |  88.1 |
|     bus     | 91.38 | 95.58 |
|     car     | 85.12 | 89.22 |
|     cat     | 89.72 | 94.98 |
|    chair    | 34.07 | 62.05 |
|     cow     | 85.81 | 92.65 |
| diningtable | 59.97 |  67.1 |
|     dog     | 83.39 | 92.44 |
|    horse    | 84.09 | 93.73 |
|  motorbike  | 82.66 | 89.61 |
|    person   | 83.33 | 89.93 |
| pottedplant | 62.73 | 71.49 |
|    sheep    | 80.83 | 90.42 |
|     sofa    | 46.62 | 58.31 |
|    train    | 87.14 | 93.15 |
|  tvmonitor  | 58.92 | 81.32 |
+-------------+-------+-------+
2023/02/12 02:40:07 - mmengine - INFO - Iter(val) [1449/1449]  aAcc: 93.9900  mIoU: 74.4700  mAcc: 85.8700
2023/02/12 02:41:03 - mmengine - INFO - Iter(train) [1500/2000]  lr: 3.5857e-05  eta: 0:04:40  time: 0.5505  data_time: 0.0094  memory: 6272  loss: 0.5055  decode.loss_ce: 0.2469  decode.acc_seg: 68.5472  aux.loss_ce: 0.2586  aux.acc_seg: 66.1312
2023/02/12 02:41:58 - mmengine - INFO - Iter(train) [1600/2000]  lr: 3.1153e-05  eta: 0:03:44  time: 0.5576  data_time: 0.0133  memory: 6272  loss: 0.3529  decode.loss_ce: 0.1725  decode.acc_seg: 94.8685  aux.loss_ce: 0.1805  aux.acc_seg: 90.0789
2023/02/12 02:41:58 - mmengine - INFO - Saving checkpoint at 1600 iterations
2023/02/12 02:42:07 - mmengine - INFO - Iter(val) [ 100/1449]    eta: 0:01:37  time: 0.0704  data_time: 0.0024  memory: 1493  
2023/02/12 02:42:15 - mmengine - INFO - Iter(val) [ 200/1449]    eta: 0:01:31  time: 0.0729  data_time: 0.0026  memory: 1723  
2023/02/12 02:42:22 - mmengine - INFO - Iter(val) [ 300/1449]    eta: 0:01:23  time: 0.0702  data_time: 0.0026  memory: 1387  
2023/02/12 02:42:29 - mmengine - INFO - Iter(val) [ 400/1449]    eta: 0:01:16  time: 0.0748  data_time: 0.0029  memory: 1379  
2023/02/12 02:42:37 - mmengine - INFO - Iter(val) [ 500/1449]    eta: 0:01:09  time: 0.0792  data_time: 0.0029  memory: 1867  
2023/02/12 02:42:44 - mmengine - INFO - Iter(val) [ 600/1449]    eta: 0:01:01  time: 0.0728  data_time: 0.0035  memory: 1420  
2023/02/12 02:42:51 - mmengine - INFO - Iter(val) [ 700/1449]    eta: 0:00:54  time: 0.0736  data_time: 0.0023  memory: 1406  
2023/02/12 02:42:59 - mmengine - INFO - Iter(val) [ 800/1449]    eta: 0:00:47  time: 0.0779  data_time: 0.0025  memory: 1511  
2023/02/12 02:43:06 - mmengine - INFO - Iter(val) [ 900/1449]    eta: 0:00:40  time: 0.0721  data_time: 0.0034  memory: 1356  
2023/02/12 02:43:13 - mmengine - INFO - Iter(val) [1000/1449]    eta: 0:00:32  time: 0.0726  data_time: 0.0034  memory: 1427  
2023/02/12 02:43:20 - mmengine - INFO - Iter(val) [1100/1449]    eta: 0:00:25  time: 0.0755  data_time: 0.0026  memory: 1617  
2023/02/12 02:43:27 - mmengine - INFO - Iter(val) [1200/1449]    eta: 0:00:18  time: 0.0723  data_time: 0.0023  memory: 1379  
2023/02/12 02:43:35 - mmengine - INFO - Iter(val) [1300/1449]    eta: 0:00:10  time: 0.0688  data_time: 0.0028  memory: 1539  
2023/02/12 02:43:42 - mmengine - INFO - Iter(val) [1400/1449]    eta: 0:00:03  time: 0.0693  data_time: 0.0021  memory: 1361  
2023/02/12 02:43:45 - mmengine - INFO - per class results:
2023/02/12 02:43:45 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 93.38 | 95.87 |
|  aeroplane  | 85.19 | 93.35 |
|   bicycle   | 42.62 | 90.15 |
|     bird    | 84.81 |  94.1 |
|     boat    | 64.35 | 87.85 |
|    bottle   | 71.25 | 86.32 |
|     bus     | 90.35 | 94.02 |
|     car     | 84.28 | 93.32 |
|     cat     | 88.94 | 95.03 |
|    chair    | 34.24 | 60.02 |
|     cow     | 85.26 | 89.81 |
| diningtable | 58.04 | 64.83 |
|     dog     | 81.65 |  92.1 |
|    horse    | 83.49 | 94.12 |
|  motorbike  | 80.34 |  91.5 |
|    person   | 83.24 | 90.96 |
| pottedplant | 63.82 | 76.98 |
|    sheep    |  79.4 | 93.09 |
|     sofa    | 46.12 | 62.62 |
|    train    |  85.0 | 94.21 |
|  tvmonitor  | 61.38 | 79.31 |
+-------------+-------+-------+
2023/02/12 02:43:45 - mmengine - INFO - Iter(val) [1449/1449]  aAcc: 93.7200  mIoU: 73.6700  mAcc: 86.6500
2023/02/12 02:44:41 - mmengine - INFO - Iter(train) [1700/2000]  lr: 2.6328e-05  eta: 0:02:48  time: 0.5515  data_time: 0.0100  memory: 6272  loss: 0.3101  decode.loss_ce: 0.1034  decode.acc_seg: 97.2467  aux.loss_ce: 0.2067  aux.acc_seg: 88.7683
2023/02/12 02:45:36 - mmengine - INFO - Iter(train) [1800/2000]  lr: 2.1335e-05  eta: 0:01:51  time: 0.5532  data_time: 0.0116  memory: 6272  loss: 0.3679  decode.loss_ce: 0.1794  decode.acc_seg: 97.9885  aux.loss_ce: 0.1885  aux.acc_seg: 91.8616
2023/02/12 02:45:43 - mmengine - INFO - Iter(val) [ 100/1449]    eta: 0:01:38  time: 0.0702  data_time: 0.0024  memory: 1493  
2023/02/12 02:45:51 - mmengine - INFO - Iter(val) [ 200/1449]    eta: 0:01:31  time: 0.0730  data_time: 0.0028  memory: 1723  
2023/02/12 02:45:58 - mmengine - INFO - Iter(val) [ 300/1449]    eta: 0:01:23  time: 0.0692  data_time: 0.0025  memory: 1387  
2023/02/12 02:46:05 - mmengine - INFO - Iter(val) [ 400/1449]    eta: 0:01:16  time: 0.0744  data_time: 0.0027  memory: 1379  
2023/02/12 02:46:13 - mmengine - INFO - Iter(val) [ 500/1449]    eta: 0:01:09  time: 0.0787  data_time: 0.0023  memory: 1867  
2023/02/12 02:46:20 - mmengine - INFO - Iter(val) [ 600/1449]    eta: 0:01:01  time: 0.0711  data_time: 0.0023  memory: 1420  
2023/02/12 02:46:27 - mmengine - INFO - Iter(val) [ 700/1449]    eta: 0:00:54  time: 0.0737  data_time: 0.0023  memory: 1406  
2023/02/12 02:46:34 - mmengine - INFO - Iter(val) [ 800/1449]    eta: 0:00:47  time: 0.0775  data_time: 0.0025  memory: 1511  
2023/02/12 02:46:42 - mmengine - INFO - Iter(val) [ 900/1449]    eta: 0:00:39  time: 0.0737  data_time: 0.0030  memory: 1356  
2023/02/12 02:46:49 - mmengine - INFO - Iter(val) [1000/1449]    eta: 0:00:32  time: 0.0700  data_time: 0.0025  memory: 1427  
2023/02/12 02:46:56 - mmengine - INFO - Iter(val) [1100/1449]    eta: 0:00:25  time: 0.0751  data_time: 0.0025  memory: 1617  
2023/02/12 02:47:03 - mmengine - INFO - Iter(val) [1200/1449]    eta: 0:00:18  time: 0.0744  data_time: 0.0027  memory: 1379  
2023/02/12 02:47:11 - mmengine - INFO - Iter(val) [1300/1449]    eta: 0:00:10  time: 0.0777  data_time: 0.0067  memory: 1539  
2023/02/12 02:47:18 - mmengine - INFO - Iter(val) [1400/1449]    eta: 0:00:03  time: 0.0710  data_time: 0.0023  memory: 1361  
2023/02/12 02:47:21 - mmengine - INFO - per class results:
2023/02/12 02:47:21 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 93.43 | 96.07 |
|  aeroplane  | 87.22 | 91.75 |
|   bicycle   | 41.79 | 90.88 |
|     bird    | 85.47 | 90.65 |
|     boat    | 66.83 | 88.31 |
|    bottle   | 71.23 | 88.42 |
|     bus     | 90.38 | 93.16 |
|     car     |  83.6 | 92.46 |
|     cat     | 89.67 | 96.85 |
|    chair    | 35.12 | 61.26 |
|     cow     | 86.18 | 91.46 |
| diningtable | 60.15 | 72.74 |
|     dog     | 82.42 | 90.81 |
|    horse    |  84.8 | 92.83 |
|  motorbike  |  82.1 |  90.7 |
|    person   | 83.14 | 90.97 |
| pottedplant | 63.76 | 75.18 |
|    sheep    |  83.0 | 91.96 |
|     sofa    | 44.14 | 55.65 |
|    train    | 85.52 | 94.08 |
|  tvmonitor  |  58.5 | 80.48 |
+-------------+-------+-------+
2023/02/12 02:47:21 - mmengine - INFO - Iter(val) [1449/1449]  aAcc: 93.8200  mIoU: 74.2100  mAcc: 86.5100
2023/02/12 02:48:17 - mmengine - INFO - Iter(train) [1900/2000]  lr: 1.6075e-05  eta: 0:00:55  time: 0.5612  data_time: 0.0141  memory: 6272  loss: 0.4676  decode.loss_ce: 0.2224  decode.acc_seg: 90.2689  aux.loss_ce: 0.2452  aux.acc_seg: 71.0443
2023/02/12 02:49:12 - mmengine - INFO - Exp name: my_config_20230212_020551
2023/02/12 02:49:12 - mmengine - INFO - Iter(train) [2000/2000]  lr: 1.0000e-05  eta: 0:00:00  time: 0.5511  data_time: 0.0098  memory: 6272  loss: 0.3883  decode.loss_ce: 0.1929  decode.acc_seg: 88.2394  aux.loss_ce: 0.1953  aux.acc_seg: 71.9892
2023/02/12 02:49:12 - mmengine - INFO - Saving checkpoint at 2000 iterations
2023/02/12 02:49:22 - mmengine - INFO - Iter(val) [ 100/1449]    eta: 0:01:40  time: 0.0742  data_time: 0.0049  memory: 1493  
2023/02/12 02:49:29 - mmengine - INFO - Iter(val) [ 200/1449]    eta: 0:01:33  time: 0.0745  data_time: 0.0027  memory: 1723  
2023/02/12 02:49:36 - mmengine - INFO - Iter(val) [ 300/1449]    eta: 0:01:24  time: 0.0714  data_time: 0.0024  memory: 1387  
2023/02/12 02:49:44 - mmengine - INFO - Iter(val) [ 400/1449]    eta: 0:01:16  time: 0.0766  data_time: 0.0047  memory: 1379  
2023/02/12 02:49:51 - mmengine - INFO - Iter(val) [ 500/1449]    eta: 0:01:09  time: 0.0779  data_time: 0.0030  memory: 1867  
2023/02/12 02:49:58 - mmengine - INFO - Iter(val) [ 600/1449]    eta: 0:01:02  time: 0.0719  data_time: 0.0025  memory: 1420  
2023/02/12 02:50:05 - mmengine - INFO - Iter(val) [ 700/1449]    eta: 0:00:54  time: 0.0781  data_time: 0.0046  memory: 1406  
2023/02/12 02:50:13 - mmengine - INFO - Iter(val) [ 800/1449]    eta: 0:00:47  time: 0.0782  data_time: 0.0025  memory: 1511  
2023/02/12 02:50:20 - mmengine - INFO - Iter(val) [ 900/1449]    eta: 0:00:39  time: 0.0724  data_time: 0.0030  memory: 1356  
2023/02/12 02:50:27 - mmengine - INFO - Iter(val) [1000/1449]    eta: 0:00:32  time: 0.0780  data_time: 0.0062  memory: 1427  
2023/02/12 02:50:34 - mmengine - INFO - Iter(val) [1100/1449]    eta: 0:00:25  time: 0.0757  data_time: 0.0028  memory: 1617  
2023/02/12 02:50:41 - mmengine - INFO - Iter(val) [1200/1449]    eta: 0:00:18  time: 0.0715  data_time: 0.0025  memory: 1379  
2023/02/12 02:50:49 - mmengine - INFO - Iter(val) [1300/1449]    eta: 0:00:10  time: 0.0696  data_time: 0.0029  memory: 1539  
2023/02/12 02:50:56 - mmengine - INFO - Iter(val) [1400/1449]    eta: 0:00:03  time: 0.0719  data_time: 0.0029  memory: 1361  
2023/02/12 02:51:00 - mmengine - INFO - per class results:
2023/02/12 02:51:00 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 93.54 | 96.32 |
|  aeroplane  | 87.55 | 93.29 |
|   bicycle   | 42.78 | 88.14 |
|     bird    | 85.43 | 93.98 |
|     boat    | 67.75 | 84.44 |
|    bottle   | 69.77 | 88.67 |
|     bus     | 90.54 | 93.26 |
|     car     | 85.33 | 91.21 |
|     cat     |  89.8 | 94.73 |
|    chair    | 35.05 | 60.54 |
|     cow     | 87.24 | 93.01 |
| diningtable | 59.65 | 65.84 |
|     dog     | 83.48 | 93.18 |
|    horse    | 84.37 |  92.5 |
|  motorbike  | 80.53 | 91.26 |
|    person   | 83.41 | 90.33 |
| pottedplant |  60.2 |  67.1 |
|    sheep    | 83.07 | 92.52 |
|     sofa    | 46.56 | 59.59 |
|    train    | 85.13 |  93.9 |
|  tvmonitor  | 57.09 | 81.58 |
+-------------+-------+-------+
2023/02/12 02:51:00 - mmengine - INFO - Iter(val) [1449/1449]  aAcc: 93.9300  mIoU: 74.2000  mAcc: 85.9700