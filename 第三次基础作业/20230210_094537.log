2023/02/10 09:45:38 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.10 (default, Nov 14 2022, 12:59:47) [GCC 9.4.0]
    CUDA available: True
    numpy_random_seed: 0
    GPU 0: Tesla T4
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 11.6, V11.6.124
    GCC: x86_64-linux-gnu-gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
    PyTorch: 1.13.1+cu116
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.6
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1+cu116
    OpenCV: 4.6.0
    MMEngine: 0.5.0

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 0
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/02/10 09:45:39 - mmengine - INFO - Config:
norm_cfg = dict(type='BN', requires_grad=False)
data_preprocessor = dict(
    type='SegDataPreProcessor',
    mean=[123.675, 116.28, 103.53],
    std=[58.395, 57.12, 57.375],
    bgr_to_rgb=True,
    pad_val=0,
    seg_pad_val=255,
    size=(512, 1024))
model = dict(
    type='EncoderDecoder',
    data_preprocessor=dict(
        type='SegDataPreProcessor',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        bgr_to_rgb=True,
        pad_val=0,
        seg_pad_val=255,
        size=(256, 256)),
    pretrained='open-mmlab://resnet50_v1c',
    backbone=dict(
        type='ResNetV1c',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        dilations=(1, 1, 2, 4),
        strides=(1, 2, 1, 1),
        norm_cfg=dict(type='BN', requires_grad=False),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True),
    decode_head=dict(
        type='PSPHead',
        in_channels=2048,
        in_index=3,
        channels=512,
        pool_scales=(1, 2, 3, 6),
        dropout_ratio=0.1,
        num_classes=2,
        norm_cfg=dict(type='BN', requires_grad=False),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    auxiliary_head=dict(
        type='FCNHead',
        in_channels=1024,
        in_index=2,
        channels=256,
        num_convs=1,
        concat_input=False,
        dropout_ratio=0.1,
        num_classes=2,
        norm_cfg=dict(type='BN', requires_grad=False),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'StanfordBackgroundDataset'
data_root = '/content/Glomeruli-dataset'
crop_size = (256, 256)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(
        type='RandomResize',
        scale=(320, 240),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(256, 256), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PackSegInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', scale=(320, 240), keep_ratio=True),
    dict(type='LoadAnnotations'),
    dict(type='PackSegInputs')
]
img_ratios = [0.5, 0.75, 1.0, 1.25, 1.5, 1.75]
tta_pipeline = [
    dict(type='LoadImageFromFile', backend_args=dict(backend='local')),
    dict(
        type='TestTimeAug',
        transforms=[[{
            'type': 'Resize',
            'scale_factor': 0.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 0.75,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.0,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.25,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.75,
            'keep_ratio': True
        }],
                    [{
                        'type': 'RandomFlip',
                        'prob': 0.0,
                        'direction': 'horizontal'
                    }, {
                        'type': 'RandomFlip',
                        'prob': 1.0,
                        'direction': 'horizontal'
                    }], [{
                        'type': 'LoadAnnotations'
                    }], [{
                        'type': 'PackSegInputs'
                    }]])
]
train_dataloader = dict(
    batch_size=8,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(type='InfiniteSampler', shuffle=True),
    dataset=dict(
        type='StanfordBackgroundDataset',
        data_root='/content/Glomeruli-dataset',
        data_prefix=dict(img_path='images', seg_map_path='masks'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(
                type='RandomResize',
                scale=(320, 240),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(256, 256), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PackSegInputs')
        ],
        ann_file='splits/train.txt'))
val_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='StanfordBackgroundDataset',
        data_root='/content/Glomeruli-dataset',
        data_prefix=dict(img_path='images', seg_map_path='masks'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(320, 240), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ],
        ann_file='splits/val.txt'))
test_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='StanfordBackgroundDataset',
        data_root='/content/Glomeruli-dataset',
        data_prefix=dict(img_path='images', seg_map_path='masks'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(320, 240), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ],
        ann_file='splits/val.txt'))
val_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
test_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='SegLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(by_epoch=False)
log_level = 'INFO'
load_from = 'pspnet_r50-d8_512x1024_40k_cityscapes_20200605_003338-2966598c.pth'
resume = False
tta_model = dict(type='SegTTAModel')
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0005),
    clip_grad=None)
param_scheduler = [
    dict(
        type='PolyLR',
        eta_min=0.0001,
        power=0.9,
        begin=0,
        end=40000,
        by_epoch=False)
]
train_cfg = dict(type='IterBasedTrainLoop', max_iters=4000, val_interval=400)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=100, log_metric_by_epoch=False),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', by_epoch=False, interval=400),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='SegVisualizationHook'))
work_dir = './work_dirs/tutorial'
randomness = dict(seed=0)

2023/02/10 09:45:39 - mmengine - WARNING - The "visualizer" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/10 09:45:39 - mmengine - WARNING - The "vis_backend" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/10 09:45:40 - mmengine - WARNING - The "model" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/10 09:45:45 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/02/10 09:45:45 - mmengine - WARNING - The "hook" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/10 09:45:45 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/02/10 09:45:46 - mmengine - WARNING - The "loop" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/10 09:45:46 - mmengine - WARNING - The "dataset" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/10 09:45:46 - mmengine - WARNING - The "transform" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/10 09:45:46 - mmengine - WARNING - The "data sampler" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/10 09:45:46 - mmengine - WARNING - The "optimizer wrapper constructor" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/10 09:45:46 - mmengine - WARNING - The "optimizer" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/10 09:45:46 - mmengine - WARNING - The "optim_wrapper" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/10 09:45:46 - mmengine - WARNING - The "parameter scheduler" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/10 09:45:46 - mmengine - WARNING - The "metric" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/10 09:45:47 - mmengine - WARNING - The "weight initializer" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/10 09:45:47 - mmengine - INFO - load model from: open-mmlab://resnet50_v1c
2023/02/10 09:45:47 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://resnet50_v1c
2023/02/10 09:45:48 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.stem.0.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.1.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.1.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.3.weight - torch.Size([32, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.4.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.4.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.6.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.7.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.7.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

decode_head.conv_seg.weight - torch.Size([2, 512, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([2]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.psp_modules.0.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.conv.weight - torch.Size([512, 4096, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.bottleneck.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.conv_seg.weight - torch.Size([2, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.conv_seg.bias - torch.Size([2]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.convs.0.conv.weight - torch.Size([256, 1024, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2023/02/10 09:45:48 - mmengine - INFO - Load checkpoint from pspnet_r50-d8_512x1024_40k_cityscapes_20200605_003338-2966598c.pth
2023/02/10 09:45:48 - mmengine - INFO - Checkpoints will be saved to /content/mmsegmentation/work_dirs/tutorial.
2023/02/10 09:46:58 - mmengine - INFO - Iter(train) [ 100/4000]  lr: 9.9799e-04  eta: 0:45:15  time: 0.6133  data_time: 0.0207  memory: 6130  loss: 0.1519  decode.loss_ce: 0.0968  decode.acc_seg: 98.7212  aux.loss_ce: 0.0551  aux.acc_seg: 98.7212
2023/02/10 09:47:58 - mmengine - INFO - Iter(train) [ 200/4000]  lr: 9.9597e-04  eta: 0:41:12  time: 0.6120  data_time: 0.0245  memory: 3773  loss: 0.0873  decode.loss_ce: 0.0568  decode.acc_seg: 99.9683  aux.loss_ce: 0.0305  aux.acc_seg: 99.9683
2023/02/10 09:48:33 - mmengine - INFO - Exp name: pspnet_r50-d8_4xb2-40k_cityscapes-512x1024_20230210_094537
2023/02/10 09:48:58 - mmengine - INFO - Iter(train) [ 300/4000]  lr: 9.9394e-04  eta: 0:38:57  time: 0.6010  data_time: 0.0194  memory: 3773  loss: 0.1040  decode.loss_ce: 0.0712  decode.acc_seg: 99.8386  aux.loss_ce: 0.0327  aux.acc_seg: 99.8386
2023/02/10 09:49:57 - mmengine - INFO - Iter(train) [ 400/4000]  lr: 9.9192e-04  eta: 0:37:22  time: 0.6137  data_time: 0.0270  memory: 3773  loss: 0.0863  decode.loss_ce: 0.0562  decode.acc_seg: 88.2921  aux.loss_ce: 0.0301  aux.acc_seg: 88.2921
2023/02/10 09:49:57 - mmengine - INFO - Saving checkpoint at 400 iterations
2023/02/10 09:50:06 - mmengine - INFO - Iter(val) [100/515]    eta: 0:00:26  time: 0.0432  data_time: 0.0041  memory: 4949  
2023/02/10 09:50:11 - mmengine - INFO - Iter(val) [200/515]    eta: 0:00:17  time: 0.0450  data_time: 0.0068  memory: 808  
2023/02/10 09:50:17 - mmengine - INFO - Iter(val) [300/515]    eta: 0:00:12  time: 0.0690  data_time: 0.0111  memory: 808  
2023/02/10 09:50:22 - mmengine - INFO - Iter(val) [400/515]    eta: 0:00:06  time: 0.0473  data_time: 0.0054  memory: 808  
2023/02/10 09:50:27 - mmengine - INFO - Iter(val) [500/515]    eta: 0:00:00  time: 0.0488  data_time: 0.0082  memory: 808  
2023/02/10 09:50:27 - mmengine - INFO - per class results:
2023/02/10 09:50:27 - mmengine - INFO - 
+------------+------+-------+
|   Class    | IoU  |  Acc  |
+------------+------+-------+
| background | 98.1 | 100.0 |
| glomeruili | 0.0  |  0.0  |
+------------+------+-------+
2023/02/10 09:50:27 - mmengine - INFO - Iter(val) [515/515]  aAcc: 98.1000  mIoU: 49.0500  mAcc: 50.0000
2023/02/10 09:51:27 - mmengine - INFO - Iter(train) [ 500/4000]  lr: 9.8989e-04  eta: 0:36:03  time: 0.5807  data_time: 0.0111  memory: 3773  loss: 0.0634  decode.loss_ce: 0.0393  decode.acc_seg: 100.0000  aux.loss_ce: 0.0241  aux.acc_seg: 100.0000
2023/02/10 09:52:27 - mmengine - INFO - Iter(train) [ 600/4000]  lr: 9.8786e-04  eta: 0:34:52  time: 0.5843  data_time: 0.0116  memory: 3773  loss: 0.0528  decode.loss_ce: 0.0328  decode.acc_seg: 100.0000  aux.loss_ce: 0.0200  aux.acc_seg: 100.0000
2023/02/10 09:53:27 - mmengine - INFO - Iter(train) [ 700/4000]  lr: 9.8583e-04  eta: 0:33:43  time: 0.5831  data_time: 0.0125  memory: 3773  loss: 0.0452  decode.loss_ce: 0.0283  decode.acc_seg: 94.9006  aux.loss_ce: 0.0170  aux.acc_seg: 93.3193
2023/02/10 09:54:27 - mmengine - INFO - Iter(train) [ 800/4000]  lr: 9.8380e-04  eta: 0:32:36  time: 0.5841  data_time: 0.0132  memory: 3773  loss: 0.0406  decode.loss_ce: 0.0261  decode.acc_seg: 99.9740  aux.loss_ce: 0.0145  aux.acc_seg: 99.9740
2023/02/10 09:54:27 - mmengine - INFO - Saving checkpoint at 800 iterations
2023/02/10 09:54:37 - mmengine - INFO - Iter(val) [100/515]    eta: 0:00:29  time: 0.0748  data_time: 0.0168  memory: 808  
2023/02/10 09:54:43 - mmengine - INFO - Iter(val) [200/515]    eta: 0:00:20  time: 0.0440  data_time: 0.0080  memory: 808  
2023/02/10 09:54:48 - mmengine - INFO - Iter(val) [300/515]    eta: 0:00:13  time: 0.0743  data_time: 0.0142  memory: 808  
2023/02/10 09:54:54 - mmengine - INFO - Iter(val) [400/515]    eta: 0:00:06  time: 0.0469  data_time: 0.0078  memory: 808  
2023/02/10 09:54:58 - mmengine - INFO - Iter(val) [500/515]    eta: 0:00:00  time: 0.0499  data_time: 0.0087  memory: 808  
2023/02/10 09:54:59 - mmengine - INFO - per class results:
2023/02/10 09:54:59 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 98.86 | 99.95 |
| glomeruili | 42.07 |  43.2 |
+------------+-------+-------+
2023/02/10 09:54:59 - mmengine - INFO - Iter(val) [515/515]  aAcc: 98.8700  mIoU: 70.4600  mAcc: 71.5800
2023/02/10 09:55:59 - mmengine - INFO - Iter(train) [ 900/4000]  lr: 9.8177e-04  eta: 0:31:31  time: 0.5794  data_time: 0.0131  memory: 3773  loss: 0.0491  decode.loss_ce: 0.0310  decode.acc_seg: 98.8630  aux.loss_ce: 0.0182  aux.acc_seg: 94.9606
2023/02/10 09:56:59 - mmengine - INFO - Exp name: pspnet_r50-d8_4xb2-40k_cityscapes-512x1024_20230210_094537
2023/02/10 09:56:59 - mmengine - INFO - Iter(train) [1000/4000]  lr: 9.7974e-04  eta: 0:30:26  time: 0.5824  data_time: 0.0117  memory: 3773  loss: 0.0332  decode.loss_ce: 0.0209  decode.acc_seg: 98.4458  aux.loss_ce: 0.0123  aux.acc_seg: 96.1136
2023/02/10 09:57:58 - mmengine - INFO - Iter(train) [1100/4000]  lr: 9.7771e-04  eta: 0:29:22  time: 0.5800  data_time: 0.0116  memory: 3773  loss: 0.0366  decode.loss_ce: 0.0222  decode.acc_seg: 98.5580  aux.loss_ce: 0.0144  aux.acc_seg: 96.1008
2023/02/10 09:58:58 - mmengine - INFO - Iter(train) [1200/4000]  lr: 9.7568e-04  eta: 0:28:18  time: 0.5822  data_time: 0.0129  memory: 3773  loss: 0.0412  decode.loss_ce: 0.0265  decode.acc_seg: 98.8598  aux.loss_ce: 0.0148  aux.acc_seg: 99.9382
2023/02/10 09:58:58 - mmengine - INFO - Saving checkpoint at 1200 iterations
2023/02/10 09:59:06 - mmengine - INFO - Iter(val) [100/515]    eta: 0:00:27  time: 0.0423  data_time: 0.0080  memory: 808  
2023/02/10 09:59:11 - mmengine - INFO - Iter(val) [200/515]    eta: 0:00:17  time: 0.0418  data_time: 0.0045  memory: 808  
2023/02/10 09:59:15 - mmengine - INFO - Iter(val) [300/515]    eta: 0:00:11  time: 0.0473  data_time: 0.0079  memory: 808  
2023/02/10 09:59:22 - mmengine - INFO - Iter(val) [400/515]    eta: 0:00:06  time: 0.0723  data_time: 0.0155  memory: 808  
2023/02/10 09:59:28 - mmengine - INFO - Iter(val) [500/515]    eta: 0:00:00  time: 0.0450  data_time: 0.0065  memory: 808  
2023/02/10 09:59:29 - mmengine - INFO - per class results:
2023/02/10 09:59:29 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 98.91 | 99.52 |
| glomeruili | 54.57 | 67.98 |
+------------+-------+-------+
2023/02/10 09:59:29 - mmengine - INFO - Iter(val) [515/515]  aAcc: 98.9200  mIoU: 76.7400  mAcc: 83.7500
2023/02/10 10:00:29 - mmengine - INFO - Iter(train) [1300/4000]  lr: 9.7365e-04  eta: 0:27:16  time: 0.5959  data_time: 0.0183  memory: 3773  loss: 0.0354  decode.loss_ce: 0.0220  decode.acc_seg: 99.4254  aux.loss_ce: 0.0134  aux.acc_seg: 99.2442
2023/02/10 10:01:28 - mmengine - INFO - Iter(train) [1400/4000]  lr: 9.7162e-04  eta: 0:26:14  time: 0.5929  data_time: 0.0148  memory: 3773  loss: 0.0278  decode.loss_ce: 0.0175  decode.acc_seg: 99.3000  aux.loss_ce: 0.0103  aux.acc_seg: 98.1623
2023/02/10 10:02:28 - mmengine - INFO - Iter(train) [1500/4000]  lr: 9.6959e-04  eta: 0:25:12  time: 0.5826  data_time: 0.0110  memory: 3773  loss: 0.0408  decode.loss_ce: 0.0260  decode.acc_seg: 99.0000  aux.loss_ce: 0.0148  aux.acc_seg: 98.6377
2023/02/10 10:03:28 - mmengine - INFO - Iter(train) [1600/4000]  lr: 9.6755e-04  eta: 0:24:10  time: 0.5820  data_time: 0.0118  memory: 3773  loss: 0.0252  decode.loss_ce: 0.0151  decode.acc_seg: 99.9741  aux.loss_ce: 0.0100  aux.acc_seg: 99.9506
2023/02/10 10:03:28 - mmengine - INFO - Saving checkpoint at 1600 iterations
2023/02/10 10:03:36 - mmengine - INFO - Iter(val) [100/515]    eta: 0:00:27  time: 0.0438  data_time: 0.0076  memory: 808  
2023/02/10 10:03:43 - mmengine - INFO - Iter(val) [200/515]    eta: 0:00:20  time: 0.0432  data_time: 0.0065  memory: 808  
2023/02/10 10:03:48 - mmengine - INFO - Iter(val) [300/515]    eta: 0:00:13  time: 0.0726  data_time: 0.0164  memory: 808  
2023/02/10 10:03:53 - mmengine - INFO - Iter(val) [400/515]    eta: 0:00:06  time: 0.0470  data_time: 0.0091  memory: 808  
2023/02/10 10:03:58 - mmengine - INFO - Iter(val) [500/515]    eta: 0:00:00  time: 0.0468  data_time: 0.0092  memory: 808  
2023/02/10 10:03:58 - mmengine - INFO - per class results:
2023/02/10 10:03:58 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 99.33 | 99.86 |
| glomeruili | 67.56 | 72.48 |
+------------+-------+-------+
2023/02/10 10:03:58 - mmengine - INFO - Iter(val) [515/515]  aAcc: 99.3400  mIoU: 83.4400  mAcc: 86.1700
2023/02/10 10:04:58 - mmengine - INFO - Iter(train) [1700/4000]  lr: 9.6552e-04  eta: 0:23:09  time: 0.5819  data_time: 0.0126  memory: 3773  loss: 0.0304  decode.loss_ce: 0.0188  decode.acc_seg: 99.3089  aux.loss_ce: 0.0116  aux.acc_seg: 98.7055
2023/02/10 10:05:58 - mmengine - INFO - Iter(train) [1800/4000]  lr: 9.6349e-04  eta: 0:22:07  time: 0.5945  data_time: 0.0175  memory: 3773  loss: 0.0200  decode.loss_ce: 0.0119  decode.acc_seg: 99.6526  aux.loss_ce: 0.0081  aux.acc_seg: 99.0647
2023/02/10 10:06:58 - mmengine - INFO - Iter(train) [1900/4000]  lr: 9.6145e-04  eta: 0:21:06  time: 0.6044  data_time: 0.0216  memory: 3773  loss: 0.0203  decode.loss_ce: 0.0122  decode.acc_seg: 98.7213  aux.loss_ce: 0.0082  aux.acc_seg: 97.5447
2023/02/10 10:07:57 - mmengine - INFO - Exp name: pspnet_r50-d8_4xb2-40k_cityscapes-512x1024_20230210_094537
2023/02/10 10:07:57 - mmengine - INFO - Iter(train) [2000/4000]  lr: 9.5942e-04  eta: 0:20:06  time: 0.6096  data_time: 0.0234  memory: 3773  loss: 0.0186  decode.loss_ce: 0.0112  decode.acc_seg: 99.8369  aux.loss_ce: 0.0074  aux.acc_seg: 99.8206
2023/02/10 10:07:57 - mmengine - INFO - Saving checkpoint at 2000 iterations
2023/02/10 10:08:06 - mmengine - INFO - Iter(val) [100/515]    eta: 0:00:27  time: 0.0429  data_time: 0.0072  memory: 808  
2023/02/10 10:08:11 - mmengine - INFO - Iter(val) [200/515]    eta: 0:00:17  time: 0.0424  data_time: 0.0059  memory: 808  
2023/02/10 10:08:15 - mmengine - INFO - Iter(val) [300/515]    eta: 0:00:11  time: 0.0452  data_time: 0.0072  memory: 808  
2023/02/10 10:08:22 - mmengine - INFO - Iter(val) [400/515]    eta: 0:00:06  time: 0.0460  data_time: 0.0078  memory: 808  
2023/02/10 10:08:26 - mmengine - INFO - Iter(val) [500/515]    eta: 0:00:00  time: 0.0441  data_time: 0.0062  memory: 808  
2023/02/10 10:08:27 - mmengine - INFO - per class results:
2023/02/10 10:08:27 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 99.42 | 99.68 |
| glomeruili | 74.45 | 86.88 |
+------------+-------+-------+
2023/02/10 10:08:27 - mmengine - INFO - Iter(val) [515/515]  aAcc: 99.4300  mIoU: 86.9400  mAcc: 93.2800
2023/02/10 10:09:26 - mmengine - INFO - Iter(train) [2100/4000]  lr: 9.5738e-04  eta: 0:19:05  time: 0.5891  data_time: 0.0153  memory: 3773  loss: 0.0354  decode.loss_ce: 0.0232  decode.acc_seg: 99.5428  aux.loss_ce: 0.0122  aux.acc_seg: 99.4157
2023/02/10 10:10:26 - mmengine - INFO - Iter(train) [2200/4000]  lr: 9.5534e-04  eta: 0:18:04  time: 0.5905  data_time: 0.0163  memory: 3773  loss: 0.0257  decode.loss_ce: 0.0156  decode.acc_seg: 97.2566  aux.loss_ce: 0.0101  aux.acc_seg: 95.5019
2023/02/10 10:11:26 - mmengine - INFO - Iter(train) [2300/4000]  lr: 9.5331e-04  eta: 0:17:03  time: 0.5872  data_time: 0.0136  memory: 3773  loss: 0.0169  decode.loss_ce: 0.0112  decode.acc_seg: 99.7843  aux.loss_ce: 0.0057  aux.acc_seg: 99.5261
2023/02/10 10:12:26 - mmengine - INFO - Iter(train) [2400/4000]  lr: 9.5127e-04  eta: 0:16:03  time: 0.5918  data_time: 0.0163  memory: 3773  loss: 0.0275  decode.loss_ce: 0.0171  decode.acc_seg: 98.7880  aux.loss_ce: 0.0104  aux.acc_seg: 97.3145
2023/02/10 10:12:26 - mmengine - INFO - Saving checkpoint at 2400 iterations
2023/02/10 10:12:33 - mmengine - INFO - Iter(val) [100/515]    eta: 0:00:22  time: 0.0678  data_time: 0.0157  memory: 808  
2023/02/10 10:12:41 - mmengine - INFO - Iter(val) [200/515]    eta: 0:00:20  time: 0.0445  data_time: 0.0079  memory: 808  
2023/02/10 10:12:45 - mmengine - INFO - Iter(val) [300/515]    eta: 0:00:12  time: 0.0425  data_time: 0.0049  memory: 808  
2023/02/10 10:12:50 - mmengine - INFO - Iter(val) [400/515]    eta: 0:00:06  time: 0.0798  data_time: 0.0227  memory: 808  
2023/02/10 10:12:56 - mmengine - INFO - Iter(val) [500/515]    eta: 0:00:00  time: 0.0466  data_time: 0.0092  memory: 808  
2023/02/10 10:12:57 - mmengine - INFO - per class results:
2023/02/10 10:12:57 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 99.47 | 99.81 |
| glomeruili | 75.21 | 82.55 |
+------------+-------+-------+
2023/02/10 10:12:57 - mmengine - INFO - Iter(val) [515/515]  aAcc: 99.4800  mIoU: 87.3400  mAcc: 91.1800
2023/02/10 10:13:57 - mmengine - INFO - Iter(train) [2500/4000]  lr: 9.4923e-04  eta: 0:15:03  time: 0.6038  data_time: 0.0203  memory: 3773  loss: 0.0157  decode.loss_ce: 0.0101  decode.acc_seg: 100.0000  aux.loss_ce: 0.0056  aux.acc_seg: 100.0000
2023/02/10 10:14:56 - mmengine - INFO - Iter(train) [2600/4000]  lr: 9.4719e-04  eta: 0:14:02  time: 0.6021  data_time: 0.0189  memory: 3773  loss: 0.0159  decode.loss_ce: 0.0097  decode.acc_seg: 100.0000  aux.loss_ce: 0.0061  aux.acc_seg: 99.5730
2023/02/10 10:15:56 - mmengine - INFO - Iter(train) [2700/4000]  lr: 9.4515e-04  eta: 0:13:02  time: 0.6027  data_time: 0.0247  memory: 3773  loss: 0.0177  decode.loss_ce: 0.0116  decode.acc_seg: 99.6185  aux.loss_ce: 0.0061  aux.acc_seg: 99.5664
2023/02/10 10:16:56 - mmengine - INFO - Iter(train) [2800/4000]  lr: 9.4312e-04  eta: 0:12:01  time: 0.6093  data_time: 0.0215  memory: 3773  loss: 0.0222  decode.loss_ce: 0.0139  decode.acc_seg: 100.0000  aux.loss_ce: 0.0083  aux.acc_seg: 100.0000
2023/02/10 10:16:56 - mmengine - INFO - Saving checkpoint at 2800 iterations
2023/02/10 10:17:03 - mmengine - INFO - Iter(val) [100/515]    eta: 0:00:19  time: 0.0413  data_time: 0.0051  memory: 808  
2023/02/10 10:17:08 - mmengine - INFO - Iter(val) [200/515]    eta: 0:00:16  time: 0.0659  data_time: 0.0140  memory: 808  
2023/02/10 10:17:13 - mmengine - INFO - Iter(val) [300/515]    eta: 0:00:10  time: 0.0442  data_time: 0.0098  memory: 808  
2023/02/10 10:17:18 - mmengine - INFO - Iter(val) [400/515]    eta: 0:00:05  time: 0.0842  data_time: 0.0183  memory: 808  
2023/02/10 10:17:26 - mmengine - INFO - Iter(val) [500/515]    eta: 0:00:00  time: 0.0677  data_time: 0.0149  memory: 808  
2023/02/10 10:17:26 - mmengine - INFO - per class results:
2023/02/10 10:17:26 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 99.48 | 99.78 |
| glomeruili | 75.65 | 84.17 |
+------------+-------+-------+
2023/02/10 10:17:26 - mmengine - INFO - Iter(val) [515/515]  aAcc: 99.4900  mIoU: 87.5600  mAcc: 91.9800
2023/02/10 10:18:26 - mmengine - INFO - Iter(train) [2900/4000]  lr: 9.4108e-04  eta: 0:11:01  time: 0.6218  data_time: 0.0297  memory: 3773  loss: 0.0131  decode.loss_ce: 0.0071  decode.acc_seg: 99.7163  aux.loss_ce: 0.0060  aux.acc_seg: 99.7328
2023/02/10 10:19:26 - mmengine - INFO - Exp name: pspnet_r50-d8_4xb2-40k_cityscapes-512x1024_20230210_094537
2023/02/10 10:19:26 - mmengine - INFO - Iter(train) [3000/4000]  lr: 9.3903e-04  eta: 0:10:01  time: 0.6200  data_time: 0.0244  memory: 3773  loss: 0.0228  decode.loss_ce: 0.0157  decode.acc_seg: 97.7423  aux.loss_ce: 0.0070  aux.acc_seg: 97.5679
2023/02/10 10:20:26 - mmengine - INFO - Iter(train) [3100/4000]  lr: 9.3699e-04  eta: 0:09:01  time: 0.6035  data_time: 0.0204  memory: 3773  loss: 0.0103  decode.loss_ce: 0.0067  decode.acc_seg: 98.8717  aux.loss_ce: 0.0036  aux.acc_seg: 99.1554
2023/02/10 10:21:25 - mmengine - INFO - Iter(train) [3200/4000]  lr: 9.3495e-04  eta: 0:08:00  time: 0.6038  data_time: 0.0203  memory: 3773  loss: 0.0220  decode.loss_ce: 0.0127  decode.acc_seg: 99.9141  aux.loss_ce: 0.0093  aux.acc_seg: 99.7405
2023/02/10 10:21:25 - mmengine - INFO - Saving checkpoint at 3200 iterations
2023/02/10 10:21:33 - mmengine - INFO - Iter(val) [100/515]    eta: 0:00:19  time: 0.0450  data_time: 0.0090  memory: 808  
2023/02/10 10:21:38 - mmengine - INFO - Iter(val) [200/515]    eta: 0:00:15  time: 0.0660  data_time: 0.0155  memory: 808  
2023/02/10 10:21:43 - mmengine - INFO - Iter(val) [300/515]    eta: 0:00:11  time: 0.0454  data_time: 0.0051  memory: 808  
2023/02/10 10:21:48 - mmengine - INFO - Iter(val) [400/515]    eta: 0:00:05  time: 0.0479  data_time: 0.0076  memory: 808  
2023/02/10 10:21:53 - mmengine - INFO - Iter(val) [500/515]    eta: 0:00:00  time: 0.0790  data_time: 0.0169  memory: 808  
2023/02/10 10:21:54 - mmengine - INFO - per class results:
2023/02/10 10:21:54 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 99.49 | 99.71 |
| glomeruili | 76.89 | 88.36 |
+------------+-------+-------+
2023/02/10 10:21:54 - mmengine - INFO - Iter(val) [515/515]  aAcc: 99.5000  mIoU: 88.1900  mAcc: 94.0300
2023/02/10 10:22:53 - mmengine - INFO - Iter(train) [3300/4000]  lr: 9.3291e-04  eta: 0:07:00  time: 0.5818  data_time: 0.0125  memory: 3773  loss: 0.0196  decode.loss_ce: 0.0132  decode.acc_seg: 99.7089  aux.loss_ce: 0.0064  aux.acc_seg: 99.6998
2023/02/10 10:23:53 - mmengine - INFO - Iter(train) [3400/4000]  lr: 9.3087e-04  eta: 0:06:00  time: 0.5817  data_time: 0.0112  memory: 3773  loss: 0.0113  decode.loss_ce: 0.0070  decode.acc_seg: 100.0000  aux.loss_ce: 0.0043  aux.acc_seg: 100.0000
2023/02/10 10:24:53 - mmengine - INFO - Iter(train) [3500/4000]  lr: 9.2882e-04  eta: 0:05:00  time: 0.5882  data_time: 0.0139  memory: 3773  loss: 0.0111  decode.loss_ce: 0.0064  decode.acc_seg: 99.7866  aux.loss_ce: 0.0047  aux.acc_seg: 99.7598
2023/02/10 10:25:54 - mmengine - INFO - Iter(train) [3600/4000]  lr: 9.2678e-04  eta: 0:04:00  time: 0.6091  data_time: 0.0223  memory: 3773  loss: 0.0122  decode.loss_ce: 0.0079  decode.acc_seg: 100.0000  aux.loss_ce: 0.0043  aux.acc_seg: 100.0000
2023/02/10 10:25:54 - mmengine - INFO - Saving checkpoint at 3600 iterations
2023/02/10 10:26:04 - mmengine - INFO - Iter(val) [100/515]    eta: 0:00:24  time: 0.0426  data_time: 0.0063  memory: 808  
2023/02/10 10:26:08 - mmengine - INFO - Iter(val) [200/515]    eta: 0:00:16  time: 0.0423  data_time: 0.0075  memory: 808  
2023/02/10 10:26:14 - mmengine - INFO - Iter(val) [300/515]    eta: 0:00:11  time: 0.0683  data_time: 0.0115  memory: 808  
2023/02/10 10:26:19 - mmengine - INFO - Iter(val) [400/515]    eta: 0:00:06  time: 0.0475  data_time: 0.0095  memory: 808  
2023/02/10 10:26:24 - mmengine - INFO - Iter(val) [500/515]    eta: 0:00:00  time: 0.0445  data_time: 0.0070  memory: 808  
2023/02/10 10:26:24 - mmengine - INFO - per class results:
2023/02/10 10:26:24 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background |  99.5 | 99.89 |
| glomeruili | 75.33 |  79.8 |
+------------+-------+-------+
2023/02/10 10:26:24 - mmengine - INFO - Iter(val) [515/515]  aAcc: 99.5000  mIoU: 87.4100  mAcc: 89.8400
2023/02/10 10:27:24 - mmengine - INFO - Iter(train) [3700/4000]  lr: 9.2473e-04  eta: 0:03:00  time: 0.5782  data_time: 0.0108  memory: 3773  loss: 0.0128  decode.loss_ce: 0.0081  decode.acc_seg: 99.7665  aux.loss_ce: 0.0047  aux.acc_seg: 99.7379
2023/02/10 10:28:24 - mmengine - INFO - Iter(train) [3800/4000]  lr: 9.2269e-04  eta: 0:02:00  time: 0.5818  data_time: 0.0103  memory: 3773  loss: 0.0046  decode.loss_ce: 0.0023  decode.acc_seg: 99.8342  aux.loss_ce: 0.0023  aux.acc_seg: 99.8395
2023/02/10 10:29:24 - mmengine - INFO - Iter(train) [3900/4000]  lr: 9.2064e-04  eta: 0:01:00  time: 0.5891  data_time: 0.0152  memory: 3773  loss: 0.0139  decode.loss_ce: 0.0083  decode.acc_seg: 99.8838  aux.loss_ce: 0.0056  aux.acc_seg: 99.8647
2023/02/10 10:30:23 - mmengine - INFO - Exp name: pspnet_r50-d8_4xb2-40k_cityscapes-512x1024_20230210_094537
2023/02/10 10:30:23 - mmengine - INFO - Iter(train) [4000/4000]  lr: 9.1860e-04  eta: 0:00:00  time: 0.5884  data_time: 0.0146  memory: 3773  loss: 0.0130  decode.loss_ce: 0.0082  decode.acc_seg: 99.6566  aux.loss_ce: 0.0048  aux.acc_seg: 99.5437
2023/02/10 10:30:23 - mmengine - INFO - Saving checkpoint at 4000 iterations
2023/02/10 10:30:32 - mmengine - INFO - Iter(val) [100/515]    eta: 0:00:25  time: 0.0665  data_time: 0.0116  memory: 808  
2023/02/10 10:30:37 - mmengine - INFO - Iter(val) [200/515]    eta: 0:00:17  time: 0.0724  data_time: 0.0132  memory: 816  
2023/02/10 10:30:43 - mmengine - INFO - Iter(val) [300/515]    eta: 0:00:12  time: 0.0445  data_time: 0.0057  memory: 808  
2023/02/10 10:30:49 - mmengine - INFO - Iter(val) [400/515]    eta: 0:00:06  time: 0.0470  data_time: 0.0081  memory: 808  
2023/02/10 10:30:54 - mmengine - INFO - Iter(val) [500/515]    eta: 0:00:00  time: 0.0451  data_time: 0.0059  memory: 808  
2023/02/10 10:30:54 - mmengine - INFO - per class results:
2023/02/10 10:30:54 - mmengine - INFO - 
+------------+------+-------+
|   Class    | IoU  |  Acc  |
+------------+------+-------+
| background | 99.5 | 99.85 |
| glomeruili | 75.7 | 81.43 |
+------------+------+-------+
2023/02/10 10:30:54 - mmengine - INFO - Iter(val) [515/515]  aAcc: 99.5000  mIoU: 87.6000  mAcc: 90.6400
