2023/02/05 08:15:38 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.10 (default, Nov 14 2022, 12:59:47) [GCC 9.4.0]
    CUDA available: True
    numpy_random_seed: 1785615964
    GPU 0: Tesla T4
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 11.2, V11.2.152
    GCC: x86_64-linux-gnu-gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
    PyTorch: 1.13.1+cu116
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.6
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1+cu116
    OpenCV: 4.6.0
    MMEngine: 0.5.0

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: None
    deterministic: False
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/02/05 08:15:38 - mmengine - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=18,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch',
        frozen_stages=3),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=5,
        in_channels=512,
        loss=dict(
            type='LabelSmoothLoss', label_smooth_val=0.1, loss_weight=1.0),
        topk=(1, 5)))
dataset_type = 'ImageNet'
data_preprocessor = dict(
    num_classes=5,
    mean=[123.675, 116.28, 103.53],
    std=[58.395, 57.12, 57.375],
    to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', scale=224),
    dict(type='RandomFlip', prob=0.5, direction='horizontal'),
    dict(type='PackClsInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='ResizeEdge', scale=256, edge='short'),
    dict(type='CenterCrop', crop_size=224),
    dict(type='PackClsInputs')
]
train_dataloader = dict(
    pin_memory=True,
    persistent_workers=True,
    collate_fn=dict(type='default_collate'),
    batch_size=64,
    num_workers=2,
    dataset=dict(
        type='CustomDataset',
        data_root='data',
        ann_file='',
        data_prefix='train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', scale=224),
            dict(type='RandomFlip', prob=0.5, direction='horizontal'),
            dict(type='PackClsInputs')
        ]),
    sampler=dict(type='DefaultSampler', shuffle=True))
val_dataloader = dict(
    pin_memory=True,
    persistent_workers=True,
    collate_fn=dict(type='default_collate'),
    batch_size=64,
    num_workers=2,
    dataset=dict(
        type='CustomDataset',
        data_root='data',
        ann_file='',
        data_prefix='val',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='ResizeEdge', scale=256, edge='short'),
            dict(type='CenterCrop', crop_size=224),
            dict(type='PackClsInputs')
        ]),
    sampler=dict(type='DefaultSampler', shuffle=False))
val_evaluator = dict(type='Accuracy', topk=(1, 5))
test_dataloader = dict(
    pin_memory=True,
    persistent_workers=True,
    collate_fn=dict(type='default_collate'),
    batch_size=64,
    num_workers=2,
    dataset=dict(
        type='CustomDataset',
        data_root='data',
        ann_file='',
        data_prefix='val',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='ResizeEdge', scale=256, edge='short'),
            dict(type='CenterCrop', crop_size=224),
            dict(type='PackClsInputs')
        ]),
    sampler=dict(type='DefaultSampler', shuffle=False))
test_evaluator = dict(type='Accuracy', topk=(1, 5))
optim_wrapper = dict(optimizer=dict(type='Adam', lr=0.0001))
param_scheduler = dict(
    type='MultiStepLR', by_epoch=True, milestones=[2, 4], gamma=0.1)
train_cfg = dict(by_epoch=True, max_epochs=5, val_interval=1)
val_cfg = dict()
test_cfg = dict()
auto_scale_lr = dict(base_batch_size=256)
default_scope = 'mmcls'
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=10),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', interval=1),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='VisualizationHook', enable=False))
env_cfg = dict(
    cudnn_benchmark=False,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='ClsVisualizer', vis_backends=[dict(type='LocalVisBackend')])
log_level = 'INFO'
load_from = 'https://download.openmmlab.com/mmclassification/v0/resnet/resnet18_batch256_imagenet_20200708-34ab8f90.pth'
resume = False
randomness = dict(seed=None, deterministic=False)
launcher = 'none'
work_dir = './work_dirs/resnet18_flower'

2023/02/05 08:15:38 - mmengine - WARNING - The "visualizer" registry in mmcls did not set import location. Fallback to call `mmcls.utils.register_all_modules` instead.
2023/02/05 08:15:38 - mmengine - WARNING - The "vis_backend" registry in mmcls did not set import location. Fallback to call `mmcls.utils.register_all_modules` instead.
2023/02/05 08:15:38 - mmengine - WARNING - The "model" registry in mmcls did not set import location. Fallback to call `mmcls.utils.register_all_modules` instead.
2023/02/05 08:15:40 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/02/05 08:15:40 - mmengine - WARNING - The "hook" registry in mmcls did not set import location. Fallback to call `mmcls.utils.register_all_modules` instead.
2023/02/05 08:15:40 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/02/05 08:15:40 - mmengine - WARNING - The "dataset" registry in mmcls did not set import location. Fallback to call `mmcls.utils.register_all_modules` instead.
2023/02/05 08:15:40 - mmengine - WARNING - The "transform" registry in mmcls did not set import location. Fallback to call `mmcls.utils.register_all_modules` instead.
2023/02/05 08:15:40 - mmengine - WARNING - The "data sampler" registry in mmcls did not set import location. Fallback to call `mmcls.utils.register_all_modules` instead.
2023/02/05 08:15:40 - mmengine - WARNING - The "optimizer wrapper constructor" registry in mmcls did not set import location. Fallback to call `mmcls.utils.register_all_modules` instead.
2023/02/05 08:15:40 - mmengine - WARNING - The "optimizer" registry in mmcls did not set import location. Fallback to call `mmcls.utils.register_all_modules` instead.
2023/02/05 08:15:40 - mmengine - WARNING - The "optimizer_wrapper" registry in mmcls did not set import location. Fallback to call `mmcls.utils.register_all_modules` instead.
2023/02/05 08:15:40 - mmengine - WARNING - The "parameter scheduler" registry in mmcls did not set import location. Fallback to call `mmcls.utils.register_all_modules` instead.
2023/02/05 08:15:40 - mmengine - WARNING - The "metric" registry in mmcls did not set import location. Fallback to call `mmcls.utils.register_all_modules` instead.
2023/02/05 08:15:40 - mmengine - WARNING - The "weight initializer" registry in mmcls did not set import location. Fallback to call `mmcls.utils.register_all_modules` instead.
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([128, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([256, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([5, 512]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 
2023/02/05 08:15:41 - mmengine - INFO - Load checkpoint from https://download.openmmlab.com/mmclassification/v0/resnet/resnet18_batch256_imagenet_20200708-34ab8f90.pth
2023/02/05 08:15:41 - mmengine - INFO - Checkpoints will be saved to /content/mmclassification/work_dirs/resnet18_flower.
2023/02/05 08:15:44 - mmengine - INFO - Epoch(train) [1][10/52]  lr: 1.0000e-04  eta: 0:01:25  time: 0.3411  data_time: 0.0743  memory: 593  loss: 1.2996
2023/02/05 08:15:46 - mmengine - INFO - Epoch(train) [1][20/52]  lr: 1.0000e-04  eta: 0:01:00  time: 0.1593  data_time: 0.0900  memory: 593  loss: 0.8784
2023/02/05 08:15:47 - mmengine - INFO - Epoch(train) [1][30/52]  lr: 1.0000e-04  eta: 0:00:50  time: 0.1593  data_time: 0.0887  memory: 593  loss: 0.7367
2023/02/05 08:15:49 - mmengine - INFO - Epoch(train) [1][40/52]  lr: 1.0000e-04  eta: 0:00:45  time: 0.1680  data_time: 0.1026  memory: 593  loss: 0.7093
2023/02/05 08:15:52 - mmengine - INFO - Epoch(train) [1][50/52]  lr: 1.0000e-04  eta: 0:00:46  time: 0.2876  data_time: 0.2140  memory: 593  loss: 0.6888
2023/02/05 08:15:52 - mmengine - INFO - Exp name: resnet18_flower_20230205_081536
2023/02/05 08:15:52 - mmengine - INFO - Saving checkpoint at 1 epochs
2023/02/05 08:15:54 - mmengine - INFO - Epoch(val) [1][6/6]  accuracy/top1: 93.6813  accuracy/top5: 100.0000
2023/02/05 08:15:56 - mmengine - INFO - Epoch(train) [2][10/52]  lr: 1.0000e-04  eta: 0:00:42  time: 0.1759  data_time: 0.1063  memory: 593  loss: 0.6267
2023/02/05 08:15:57 - mmengine - INFO - Epoch(train) [2][20/52]  lr: 1.0000e-04  eta: 0:00:38  time: 0.1573  data_time: 0.0867  memory: 593  loss: 0.6370
2023/02/05 08:15:59 - mmengine - INFO - Epoch(train) [2][30/52]  lr: 1.0000e-04  eta: 0:00:35  time: 0.1612  data_time: 0.0928  memory: 593  loss: 0.5930
2023/02/05 08:16:01 - mmengine - INFO - Epoch(train) [2][40/52]  lr: 1.0000e-04  eta: 0:00:32  time: 0.1550  data_time: 0.0871  memory: 593  loss: 0.5965
2023/02/05 08:16:02 - mmengine - INFO - Epoch(train) [2][50/52]  lr: 1.0000e-04  eta: 0:00:30  time: 0.1640  data_time: 0.0955  memory: 593  loss: 0.6045
2023/02/05 08:16:02 - mmengine - INFO - Exp name: resnet18_flower_20230205_081536
2023/02/05 08:16:02 - mmengine - INFO - Saving checkpoint at 2 epochs
2023/02/05 08:16:05 - mmengine - INFO - Epoch(val) [2][6/6]  accuracy/top1: 95.6044  accuracy/top5: 100.0000
2023/02/05 08:16:08 - mmengine - INFO - Epoch(train) [3][10/52]  lr: 1.0000e-05  eta: 0:00:29  time: 0.3000  data_time: 0.2294  memory: 593  loss: 0.5872
2023/02/05 08:16:09 - mmengine - INFO - Epoch(train) [3][20/52]  lr: 1.0000e-05  eta: 0:00:26  time: 0.1697  data_time: 0.1016  memory: 593  loss: 0.5744
2023/02/05 08:16:11 - mmengine - INFO - Epoch(train) [3][30/52]  lr: 1.0000e-05  eta: 0:00:24  time: 0.1571  data_time: 0.0885  memory: 593  loss: 0.5723
2023/02/05 08:16:12 - mmengine - INFO - Epoch(train) [3][40/52]  lr: 1.0000e-05  eta: 0:00:22  time: 0.1534  data_time: 0.0846  memory: 593  loss: 0.5531
2023/02/05 08:16:14 - mmengine - INFO - Epoch(train) [3][50/52]  lr: 1.0000e-05  eta: 0:00:20  time: 0.1554  data_time: 0.0882  memory: 593  loss: 0.5484
2023/02/05 08:16:14 - mmengine - INFO - Exp name: resnet18_flower_20230205_081536
2023/02/05 08:16:14 - mmengine - INFO - Saving checkpoint at 3 epochs
2023/02/05 08:16:16 - mmengine - INFO - Epoch(val) [3][6/6]  accuracy/top1: 95.3297  accuracy/top5: 100.0000
2023/02/05 08:16:18 - mmengine - INFO - Epoch(train) [4][10/52]  lr: 1.0000e-05  eta: 0:00:17  time: 0.1721  data_time: 0.1036  memory: 593  loss: 0.5810
2023/02/05 08:16:20 - mmengine - INFO - Epoch(train) [4][20/52]  lr: 1.0000e-05  eta: 0:00:15  time: 0.2445  data_time: 0.1716  memory: 593  loss: 0.5962
2023/02/05 08:16:23 - mmengine - INFO - Epoch(train) [4][30/52]  lr: 1.0000e-05  eta: 0:00:14  time: 0.2630  data_time: 0.1850  memory: 593  loss: 0.5485
2023/02/05 08:16:24 - mmengine - INFO - Epoch(train) [4][40/52]  lr: 1.0000e-05  eta: 0:00:12  time: 0.1647  data_time: 0.0970  memory: 593  loss: 0.5407
2023/02/05 08:16:26 - mmengine - INFO - Epoch(train) [4][50/52]  lr: 1.0000e-05  eta: 0:00:10  time: 0.1657  data_time: 0.0967  memory: 593  loss: 0.5514
2023/02/05 08:16:26 - mmengine - INFO - Exp name: resnet18_flower_20230205_081536
2023/02/05 08:16:26 - mmengine - INFO - Saving checkpoint at 4 epochs
2023/02/05 08:16:28 - mmengine - INFO - Epoch(val) [4][6/6]  accuracy/top1: 96.4286  accuracy/top5: 100.0000
2023/02/05 08:16:29 - mmengine - INFO - Epoch(train) [5][10/52]  lr: 1.0000e-06  eta: 0:00:07  time: 0.1667  data_time: 0.0983  memory: 593  loss: 0.5438
2023/02/05 08:16:31 - mmengine - INFO - Epoch(train) [5][20/52]  lr: 1.0000e-06  eta: 0:00:06  time: 0.1731  data_time: 0.1055  memory: 593  loss: 0.5533
2023/02/05 08:16:33 - mmengine - INFO - Epoch(train) [5][30/52]  lr: 1.0000e-06  eta: 0:00:04  time: 0.1717  data_time: 0.1021  memory: 593  loss: 0.5493
2023/02/05 08:16:36 - mmengine - INFO - Epoch(train) [5][40/52]  lr: 1.0000e-06  eta: 0:00:02  time: 0.2753  data_time: 0.2022  memory: 593  loss: 0.5571
2023/02/05 08:16:38 - mmengine - INFO - Epoch(train) [5][50/52]  lr: 1.0000e-06  eta: 0:00:00  time: 0.2280  data_time: 0.1579  memory: 593  loss: 0.5560
2023/02/05 08:16:38 - mmengine - INFO - Exp name: resnet18_flower_20230205_081536
2023/02/05 08:16:38 - mmengine - INFO - Saving checkpoint at 5 epochs
2023/02/05 08:16:40 - mmengine - INFO - Epoch(val) [5][6/6]  accuracy/top1: 96.4286  accuracy/top5: 100.0000
